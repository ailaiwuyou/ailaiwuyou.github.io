<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>express总结</title>
    <url>/express%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>如有不详细或者不正确的地方多多指正。</p>
<p>我们可以拿js与jquery关系来类比一下：</p>
<p>jQuery是JS在浏览器环境下的封装库，把DOM操作，ajax等封装成了兼容性好，方便使用的方法<br>node是JS的一个非浏览器运行平台，里面提供API进行web服务器开发，封装了node关于web的一些API</p>
<span id="more"></span>
<p>两者有相同之处，express和jQuery都是对自己平台（node，DOM API）进行了封装<br>两者有不同之处，功能范畴完全不一样。express开发服务器，jquery做浏览器端操作。</p>
<p>express可以通过官方提供的命令行进行安装，官方目前默认的界面文件用jade格式，建议修改为pug格式的文件（<a href="https://www.zhihu.com/question/46418330">jade版权问题</a>） ，同时要在package.json中安装对应的npm包和app.js <code>app.set(&#39;view engine&#39;, &#39;pug&#39;)</code>设置对应的界面引擎解释器。</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><p>路由的使用首先要引入express的路由模块，express官网的一个简单的get请求路由示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// respond with &quot;hello world&quot; when a GET request is made to the homepage</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><p>post请求首先要引入bodyparse中间件，它用于解析客户端请求中的body中的内容,<br>使用express应用生成器生成一个网站，它默认已经使用了 bodyParser.json 与 bodyParser.urlencoded 的解析功能，除了这两个，bodyParser还支持对text、raw的解析。</p>
<p><code>app.use(bodyParser.json())</code>bodyParser.json是用来解析json数据格式的<br><code>app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</code>bodyParser.urlencoded则是用来解析我们通常的form表单提交的数据，也就是请求头中包含这样的信息： Content-Type: application/x-www-form-urlencoded;</p>
<p>extended:如果设置为false，那么对URL-encoded的数据的解析采用querystring库，如果设置为true那么采用qs库(（<a href="https://segmentfault.com/q/1010000012370558/">querystring和qs的不同</a>）)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// home.pug</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">	<span class="attr">url</span>:userPath+<span class="string">&quot;/userinfo-company&quot;</span>,</span><br><span class="line">	<span class="attr">data</span>:&#123;</span><br><span class="line">		<span class="attr">module</span>:<span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">		<span class="attr">userId</span>:userId</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">	<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">		alert(res);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(error);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);  <span class="comment">// bodyparser中间件</span></span><br><span class="line">&lt;!--app.use(bodyParser.json());--&gt;   <span class="comment">// bodyParser.json是用来解析json数据格式的</span></span><br><span class="line">&lt;!--app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)); --&gt;   <span class="comment">// bodyParser.urlencoded则是用来解析我们通常的form表单提交的数据，也就是请求头中包含这样的信息： Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line">router.post(<span class="string">&#x27;/userinfo-company&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = req.body.module;</span><br><span class="line">    <span class="keyword">var</span> userid = req.body.userId;</span><br><span class="line">    request(</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">url</span>: nodeApi + <span class="string">&#x27;/menu/getInfo&#x27;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">form</span>: &#123;</span><br><span class="line">                <span class="attr">module</span>: <span class="built_in">module</span>,</span><br><span class="line">                <span class="attr">userId</span>: userid</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">error,response,body</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( response.statusCode == <span class="number">200</span> ) &#123;</span><br><span class="line">                <span class="keyword">var</span> tempArr = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>安全性问题后台无法读取到cookie，后面将请求菜单的方法放在了js中，然后在将菜单传到路由中，通过res.render进行动态渲染</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/menu&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    menuArr = <span class="built_in">JSON</span>.parse(req.body.menuArr);</span><br><span class="line">    res.send(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>后面发现可以传递cookie，但未在项目中使用</p>
<p>默认情况下，cookies是禁用的。在defaults或options将jar设为true，使后续的请求都使用cookie.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">var</span> request = request<span class="selector-class">.defaults</span>(&#123;jar: true&#125;)</span><br><span class="line"><span class="function"><span class="title">request</span><span class="params">(<span class="string">&#x27;http://www.google.com&#x27;</span>, function ()</span></span> &#123;</span><br><span class="line">    request(<span class="string">&#x27;http://images.google.com&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过创建request.jar()的新实例，可以使用定制的cookie，而不是request全局的cookie jar。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">var</span> j = request<span class="selector-class">.jar</span>()</span><br><span class="line"><span class="selector-tag">var</span> request = request<span class="selector-class">.defaults</span>(&#123;jar:j&#125;)</span><br><span class="line"><span class="function"><span class="title">request</span><span class="params">(<span class="string">&#x27;http://www.google.com&#x27;</span>, function ()</span></span> &#123;</span><br><span class="line">    request(<span class="string">&#x27;http://images.google.com&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">var</span> j = request<span class="selector-class">.jar</span>()</span><br><span class="line"><span class="selector-tag">var</span> cookie = request<span class="selector-class">.cookie</span>(<span class="string">&#x27;your_cookie_here&#x27;</span>)</span><br><span class="line">j<span class="selector-class">.setCookie</span>(cookie, uri, function (err, cookie)&#123;&#125;)</span><br><span class="line"><span class="function"><span class="title">request</span><span class="params">(&#123;url: <span class="string">&#x27;http://www.google.com&#x27;</span>, jar: j&#125;, function ()</span></span> &#123;</span><br><span class="line">    request(<span class="string">&#x27;http://images.google.com&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>注意，setCookie至少需要三个参数，最后一个是回调函数。</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>Express 是一个自身功能极简，完全是由路由和中间件构成一个的web开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。中间件（Middleware）是一个函数，如果当前中间件没有终结请求-响应循环，则必须调用next()方法将控制权交给下一个中间件，否则请求就会挂起。</p>
<p>中间件分为：应用级中间件，路由级中间件，错误处理中间件，内置中间件，第三方中间件。</p>
<p>上面用的bodyParser是应用级的中间件，router是路由级的中间件，有关中间件更详细的内容参见express官网（<a href="http://www.expressjs.com.cn/guide/using-middleware.html">express中间件</a>）</p>
<h2 id="一些小的注意点"><a href="#一些小的注意点" class="headerlink" title="一些小的注意点"></a>一些小的注意点</h2><p>模板引擎前面的缩进要么是空格或者是tab，如果两者混用会报错。</p>
<p>express更改路由中的内容的时候必须要重启本地服务器。只需要全局安装supervisor，然后命令行supervisor app.js就可以自动重启。</p>
]]></content>
      <categories>
        <category>项目总结</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>center os环境下Jenkins的安装与启动.md</title>
    <url>/center%20os%E7%8E%AF%E5%A2%83%E4%B8%8BJenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><p><code>yum -y list java* </code><br><img src="//img.gaojingbo.com/image/blog/java/java-list.png" alt="image"><br><code>yum install -y java-1.8.0-openjdk-src.x86_64</code></p>
<span id="more"></span>
<h4 id="确认java是否安装成功"><a href="#确认java是否安装成功" class="headerlink" title="确认java是否安装成功"></a>确认java是否安装成功</h4><p><code>java -version</code></p>
<p><img src="http://img.gaojingbo.com/image/blog/java_success.png" alt="image"></p>
<h3 id="Jenkins安装与启动"><a href="#Jenkins安装与启动" class="headerlink" title="Jenkins安装与启动"></a>Jenkins安装与启动</h3><h4 id="下载Jenkins"><a href="#下载Jenkins" class="headerlink" title="下载Jenkins"></a>下载Jenkins</h4><p><a href="http://mirrors.jenkins-ci.org/redhat/">Jenkins下载的参考地址</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo wget -O <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/jenkins.repo https:/</span><span class="regexp">/pkg.jenkins.io/</span>redhat/jenkins.repo</span><br><span class="line">sudo rpm --import https:<span class="regexp">//</span>pkg.jenkins.io<span class="regexp">/redhat/</span>jenkins.io.key</span><br><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure>
<h4 id="启动Jenkins-并且确认Jenkins是否启动成功"><a href="#启动Jenkins-并且确认Jenkins是否启动成功" class="headerlink" title="启动Jenkins,并且确认Jenkins是否启动成功"></a>启动Jenkins,并且确认Jenkins是否启动成功</h4><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="keyword"> system</span>ctl start jenkins</span><br><span class="line">sudo<span class="keyword"> system</span>ctl status jenkins</span><br></pre></td></tr></table></figure>
<p>启动成功<br><img src="http://img.gaojingbo.com/image/blog/jenkins_start_success.png" alt="image"></p>
<h4 id="启动成功但是无法访问"><a href="#启动成功但是无法访问" class="headerlink" title="启动成功但是无法访问"></a>启动成功但是无法访问</h4><ol>
<li>检查防火墙是否开启<code>systemctl status firewalld</code></li>
</ol>
<p><img src="http://img.gaojingbo.com/image/blog/firewall.png" alt="image"></p>
<p>防火墙已开启</p>
<ol start="2">
<li>检查端口是否开放<code>firewall-cmd --list-ports</code></li>
</ol>
<p><img src="http://img.gaojingbo.com/image/blog/8080port.png" alt="image"></p>
<p>端口已开放</p>
<ol start="3">
<li>如果端口未开放，则执行<code>firewall-cmd --permanent --zone=public --add-port=8080/tcp</code>开放端口</li>
</ol>
<ol start="4">
<li>重启防火墙<code>systemctl reload firewalld</code></li>
</ol>
<h4 id="依然不可以访问"><a href="#依然不可以访问" class="headerlink" title="依然不可以访问"></a>依然不可以访问</h4><p>需要去配置阿里云服务器的防火墙,本实例安全组 ——&gt; 配置规则 ——&gt; 快速添加 ——&gt; 添加8080端口即可</p>
<p><img src="http://img.gaojingbo.com/image/blog/aliyunport.png" alt="image"></p>
]]></content>
      <categories>
        <category>发布流程</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>linux</tag>
        <tag>发布流程</tag>
      </tags>
  </entry>
  <entry>
    <title>mpage-cli3.0</title>
    <url>/mpage-cli3-0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>vue-cli3.0 多页面应用配置文件,暂存</p>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> glob = <span class="built_in">require</span>(<span class="string">&#x27;glob&#x27;</span>)</span><br><span class="line"><span class="comment">//配置pages多页面获取当前文件夹下的html和js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEntry</span>(<span class="params">globPath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> entries = &#123;&#125;,</span><br><span class="line">        basename, tmp, pathname, appname;</span><br><span class="line">    glob.sync(globPath).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">        basename = path.basename(entry, path.extname(entry));</span><br><span class="line">        tmp = entry.split(<span class="string">&#x27;/&#x27;</span>).splice(-<span class="number">3</span>);</span><br><span class="line">        pathname = basename; <span class="comment">// 正确输出js和html的路径</span></span><br><span class="line">        entries[pathname] = &#123;</span><br><span class="line">            entry: <span class="string">&#x27;./&#x27;</span>+tmp[<span class="number">0</span>] + <span class="string">&#x27;/&#x27;</span> + tmp[<span class="number">1</span>] + <span class="string">&#x27;/&#x27;</span> + tmp[<span class="number">1</span>] + <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">            template: entry,</span><br><span class="line">            title: basename,</span><br><span class="line">            filename: tmp[<span class="number">2</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> entries;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pages = getEntry(<span class="string">&#x27;./src/**/*.html&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    pages</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-cli3.0</tag>
      </tags>
  </entry>
  <entry>
    <title>vim常用快捷键与命令</title>
    <url>/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>工作经常用到 vim，收集了下常用的 vim 命令</p>
<span id="more"></span>

<h2 id="定位光标"><a href="#定位光标" class="headerlink" title="定位光标:"></a>定位光标:</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">G           将光标定位到文本末尾行首</span><br><span class="line">gg          将光标定位到文本启始位置</span><br><span class="line">0(数字零)    定位到光标所在行行首</span><br><span class="line"><span class="variable">$ </span>          定位到光标所在行行尾</span><br><span class="line">数字 + G     跳转到第n行</span><br></pre></td></tr></table></figure>
<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标:"></a>移动光标:</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">h 向左移动</span><br><span class="line">l 向右移动</span><br><span class="line"><span class="keyword">j </span>向下移动</span><br><span class="line">k 向上移动</span><br><span class="line"><span class="keyword">b </span>移动到上一个单词词首</span><br><span class="line">e 移动到下一个单词词尾</span><br></pre></td></tr></table></figure>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> 在光标后面插入内容</span><br><span class="line"><span class="selector-tag">A</span> 在光标所在行行尾部插入内容</span><br><span class="line"><span class="selector-tag">i</span> 在光标前面插入内容</span><br><span class="line"><span class="selector-tag">I</span> 在光标所在行行首插入内容</span><br><span class="line">o 在光标所在行下面新启一行插入内容</span><br><span class="line">O 在光标所在行上面新启一行插入内容</span><br></pre></td></tr></table></figure>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">r</span> 替换光标所在的字母并进入插入模式</span><br><span class="line"><span class="built_in">R</span> 替换光所在位置随着输入可以将后面的内容替换</span><br></pre></td></tr></table></figure>
<h2 id="修改命令-删除-插入"><a href="#修改命令-删除-插入" class="headerlink" title="修改命令 (删除+插入)"></a>修改命令 (删除+插入)</h2><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cc</span> 修改光标所在行内容</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line">ctrl + g    显示文本信息</span><br><span class="line">ctrl + b    向上翻页</span><br><span class="line">ctrl + f    想后翻页</span><br><span class="line">ZQ          强制退出(即不保存修改的内容,相当于:q!)</span><br><span class="line">ZZ          写入退出(相当于:wq)</span><br><span class="line">dd          删除光标所在行</span><br><span class="line">yy          复制光标所在行</span><br><span class="line">p           粘贴到光标所在行后面</span><br><span class="line">P           粘贴到光标所在行前面</span><br><span class="line">u           撤销修改内容</span><br><span class="line">ctrl + r    恢复撤销的内容(回撤)</span><br><span class="line">\内容       搜索内容 n 向下搜索 N 向上搜索</span><br><span class="line">?内容       搜索内容 N 向下搜索 n 向上搜索</span><br><span class="line">%           定位另一个括号</span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">&gt;         增加缩进</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">&gt; &lt;&lt;      减少缩进</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">&gt; :!命令                  执行 shell 命令</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">&gt; :w 文件名               文件另存为</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">&gt; : s/原内容/替换内容      替换光标所在行内容</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">&gt; : s/原内容/替换内容/g    替换光标所在行整行内容</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">&gt; :%s/原内容/替换内容/g    替换整个文本内容</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">&gt; r                       合并文件</span></span><br></pre></td></tr></table></figure>

<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h5 id="大幅度移动光标时可以使用-翻页命令-和定位光标命令-小幅度移动光标可以使用-移动光标命令"><a href="#大幅度移动光标时可以使用-翻页命令-和定位光标命令-小幅度移动光标可以使用-移动光标命令" class="headerlink" title="大幅度移动光标时可以使用 翻页命令,和定位光标命令,小幅度移动光标可以使用 移动光标命令"></a>大幅度移动光标时可以使用 翻页命令,和定位光标命令,小幅度移动光标可以使用 移动光标命令</h5><h5 id="修改-复制-删除-可以结合-定位光标使用"><a href="#修改-复制-删除-可以结合-定位光标使用" class="headerlink" title="修改 复制 删除 可以结合 定位光标使用"></a>修改 复制 删除 可以结合 定位光标使用</h5><p>例如:<br>y$ 就是将光标所在位置(包括光标选中的字母)到行尾部的内容复制到剪切板<br>y0 就是将光标所在位置(不包括光标选中的字母)到行首的内容负责到剪切板</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode代码格式化</title>
    <url>/vscode%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>eslint 主要解决代码质量问题，例如：对于从未更改过值得变量，提示用const；不允许有 console 和 alert 等<br>prettier 主要解决代码格式问题，例如缩进，同时允许通过eslint的规则来对代码进行格式化</p>
<span id="more"></span>
<p>具体配置：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">&lt;!-- devDependencies  开发依赖 --&gt;</span><br><span class="line"><span class="string">&quot;eslint&quot;</span>: <span class="string">&quot;^7.18.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint-config-airbnb&quot;</span>: <span class="string">&quot;^18.2.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint-config-prettier&quot;</span>: <span class="string">&quot;^7.2.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint-plugin-import&quot;</span>: <span class="string">&quot;^2.22.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint-plugin-javascript&quot;</span>: <span class="string">&quot;^1.3.4&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint-plugin-jsx-a11y&quot;</span>: <span class="string">&quot;^6.4.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint-plugin-prettier&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint-plugin-react&quot;</span>: <span class="string">&quot;^7.22.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint-plugin-vue&quot;</span>: <span class="string">&quot;^7.4.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;prettier&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;prettier-eslint&quot;</span>: <span class="string">&quot;^12.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;prettier-eslint-cli&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;typescript&quot;</span>: <span class="string">&quot;^4.1.3&quot;</span>,</span><br></pre></td></tr></table></figure>

<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="function"><span class="title">settings</span>.json 在setting中配置下面得选项--&gt;</span></span><br><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [<span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;javascriptreact&quot;</span>, <span class="string">&quot;vue&quot;</span>, <span class="string">&quot;html&quot;</span>],   <span class="comment">// 需要格式化得文件</span></span><br><span class="line"><span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;editor.formatOnType&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;editor.formatOnPaste&quot;</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">&lt;!-- .<span class="function"><span class="title">eslintrc</span>   eslint得配置文件 --&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;root&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;vue-eslint-parser&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;babel-eslint&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;es6&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [   <span class="comment">// 按顺序，逐级覆盖规则，避免规则冲突</span></span><br><span class="line">        <span class="string">&quot;plugin:vue/vue3-essential&quot;</span>,</span><br><span class="line">        <span class="string">&quot;airbnb&quot;</span>,</span><br><span class="line">        <span class="string">&quot;plugin:prettier/recommended&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;no-console&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">        <span class="string">&quot;func-names&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vue/comment-directive&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- .prettierrc   prettier得配置文件 -->
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">&quot;overrides&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;files&quot;</span>: <span class="string">&quot;*.html&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;parser&quot;</span>:<span class="string">&quot;html&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;files&quot;</span>: <span class="string">&quot;*.vue&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;parser&quot;</span>:<span class="string">&quot;vue&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码格式化</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vscode</tag>
        <tag>eslint</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3.0使用总结</title>
    <url>/vue3-0%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>vue3.0体验与总结</p>
<p>vue3.0 typescript类型声明的方法</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">declare module <span class="string">&quot;@vue/runtime-core&quot;</span> &#123;</span><br><span class="line">    interface ComponentCustomProperties &#123;</span><br><span class="line">        axios: AxiosStatic;</span><br><span class="line">        <span class="variable">$message</span>: <span class="literal">any</span>;</span><br><span class="line">        <span class="variable">$socket</span>: <span class="literal">any</span>;</span><br><span class="line">        <span class="variable">$notification</span>: <span class="literal">any</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>vue3.0 *.vue文件类型的声明方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&quot;*.vue&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span> <span class="keyword">type</span> &#123; DefineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, <span class="built_in">any</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> component;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>router方法的改变</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> &quot;vue-router&quot;;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">Login</span> <span class="keyword">from</span> &quot;../views/login.vue&quot;;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> &quot;../views/main.vue&quot;;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> &quot;../views/home.vue&quot;;</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">    &#123; <span class="type">path</span>: &quot;/&quot;, <span class="type">name</span>: &quot;Main&quot;, component: Main, redirect: &quot;/login&quot; &#125;,</span><br><span class="line">    &#123; <span class="type">path</span>: &quot;/login&quot;, <span class="type">name</span>: &quot;Login&quot;, component: <span class="keyword">Login</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">path</span>: &quot;/home&quot;,</span><br><span class="line">        <span class="type">name</span>: &quot;Home&quot;,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(),</span><br><span class="line">    routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>typescript</tag>
        <tag>vue3.0</tag>
      </tags>
  </entry>
  <entry>
    <title>固定行和列的表格</title>
    <url>/%E5%9B%BA%E5%AE%9A%E8%A1%A8%E5%A4%B4%E7%9A%84%E8%A1%A8%E6%A0%BC.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>一个简单的固定列和行的表格，代码还需优化。</p>
<span id="more"></span>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="http://img.gaojingbo.com/image/blog/fixedTable.png"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>html</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;table.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tablebox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tablebox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/2.2.3/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;art-template.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;table.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">                year: <span class="string">&quot;2018&quot;</span>,</span></span><br><span class="line">                area: [</span><br><span class="line"><span class="javascript">                    <span class="string">&quot;下城区&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;上城区&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;西湖区&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;拱墅区&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;余杭区&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;江干区&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;滨江区&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;富阳区&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;临安区&quot;</span></span></span><br><span class="line">                ],</span><br><span class="line">                data: [&#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&quot;邮件营销&quot;</span>,</span></span><br><span class="line">                    data: [120, 132, 101, 134, 90, 230, 210, 30, 320]</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&quot;联盟广告&quot;</span>,</span></span><br><span class="line">                    data: [220, 182, 191, 234, 290, 330, 310, 33, 45]</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&quot;视频广告&quot;</span>,</span></span><br><span class="line">                    data: [150, 232, 201, 154, 190, 330, 410, 400, 320]</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&quot;搜索引擎&quot;</span>,</span></span><br><span class="line">                    data: [862, 1018, 964, 1026, 1679, 1600, 1570, 330, 32]</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;百度&#x27;</span>,</span></span><br><span class="line">                    data: [620, 732, 701, 734, 1090, 1130, 1120, 496, 1000]</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;谷歌&#x27;</span>,</span></span><br><span class="line">                    data: [120, 132, 101, 134, 290, 230, 220, 145, 478]</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;必应&#x27;</span>,</span></span><br><span class="line">                    data: [60, 72, 71, 74, 190, 130, 110, 754, 654]</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;其他&#x27;</span>,</span></span><br><span class="line">                    data: [62, 82, 91, 84, 109, 110, 120, 256, 852]</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> Table(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">&#x27;tablebox&#x27;</span>,</span></span><br><span class="line">                data: data,</span><br><span class="line"><span class="javascript">                fixedCol: <span class="number">1</span>  <span class="comment">// 左侧固定的列</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<!--more-->
<p>js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Table</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> otable = <span class="built_in">document</span>.getElementById(option.el);</span><br><span class="line">    <span class="built_in">console</span>.log(otable);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接头部的dom</span></span><br><span class="line">    <span class="keyword">var</span> strHeader = <span class="string">&#x27;&lt;th&gt;&#x27;</span>+ option.data.year +<span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">    option.data.data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        strHeader += <span class="string">&#x27;&lt;th&gt;&#x27;</span>+item.name+<span class="string">&#x27;&lt;/th&gt;&#x27;</span> </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> headerDom = <span class="string">&#x27;&lt;div class=&quot;tableHeader&quot;&gt;&lt;table cellspacing=&quot;0&quot;&gt;&lt;thead id=&quot;tableHeaderHtml&quot;&gt;&#x27;</span>+ strHeader +<span class="string">&#x27;&lt;th class=&quot;isScroll&quot;&gt;&lt;/th&gt;&lt;/thead&gt;&lt;/table&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#tablebox&#x27;</span>).append(headerDom);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拼接innerTable</span></span><br><span class="line">    <span class="keyword">var</span> tableInner = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一列</span></span><br><span class="line">    <span class="keyword">var</span> firstCol = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; option.data.area.length; i++)&#123;</span><br><span class="line">        firstCol+= <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ option.data.area[i] +<span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tableInner = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; option.data.data[<span class="number">0</span>].data.length; i++)&#123;</span><br><span class="line">        <span class="comment">// var tr = &#x27;&#x27;;</span></span><br><span class="line">        <span class="keyword">var</span> td = <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ option.data.area[i] +<span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; option.data.data.length; j++)&#123;</span><br><span class="line">            td +=<span class="string">&#x27;&lt;td&gt;&#x27;</span>+ option.data.data[j].data[i] +<span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tableInner += <span class="string">&#x27;&lt;tr&gt;&#x27;</span>+ td +<span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tableInnerDom = <span class="string">&#x27;&lt;div class=&quot;tableInner&quot;&gt;&lt;table cellspacing=&quot;0&quot;&gt;&lt;tbody id=&quot;tableInnerBodyHtml&quot;&gt;&#x27;</span>+ tableInner +<span class="string">&#x27;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#tablebox&#x27;</span>).append(tableInnerDom);</span><br><span class="line">    <span class="comment">// 拼接左侧固定dom</span></span><br><span class="line">    <span class="keyword">var</span> strLeftHeader = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; option.fixedCol; i++)&#123;  <span class="comment">// 先固定一行，以后再进行多行的封装</span></span><br><span class="line">        strLeftHeader += <span class="string">&#x27;&lt;th&gt;&#x27;</span>+ option.data.year +<span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> strLeftBody = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; option.data.area.length; i++)&#123;</span><br><span class="line">        strLeftBody+= <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span>+ option.data.area[i] +<span class="string">&#x27;&lt;/td&gt;&lt;/tr&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> leftDom = <span class="string">&#x27;&lt;div class=&quot;tableLeft&quot;&gt;&lt;div class=&quot;tableLeftHeader&quot;&gt;&lt;table cellspacing=&quot;0&quot;&gt;&lt;thead&gt;&lt;tr id=&quot;tableLeftHeaderHTML&quot;&gt;&#x27;</span>+ strLeftHeader +<span class="string">&#x27;&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class=&quot;tableLeftBody&quot;&gt;&lt;table cellspacing=&quot;0&quot;&gt;&lt;tbody id=&quot;tableLeftBodyHtml&quot;&gt;&#x27;</span>+ strLeftBody +<span class="string">&#x27;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">    $(<span class="string">&#x27;#tablebox&#x27;</span>).append(leftDom);</span><br><span class="line">    <span class="built_in">this</span>.scrollBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取各大浏览器的而宽度</span></span><br><span class="line"></span><br><span class="line">Table.prototype.getScrollbarWidth = <span class="function"><span class="keyword">function</span>(<span class="params">first_argument</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>),</span><br><span class="line">        styles = &#123;</span><br><span class="line">            width: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">            height: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">            overflowY: <span class="string">&quot;scroll&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        i,</span><br><span class="line">        scrollbarWidth;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> styles) &#123;</span><br><span class="line">        oP.style[i] = styles[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(oP);</span><br><span class="line">    scrollbarWidth = oP.offsetWidth - oP.clientWidth;</span><br><span class="line">    oP.remove();</span><br><span class="line">    <span class="keyword">return</span> scrollbarWidth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ***********************************图表滚动条的处理********************************</span></span><br><span class="line"></span><br><span class="line">Table.prototype.scrollBar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollBarWidth = <span class="built_in">this</span>.getScrollbarWidth(); <span class="comment">// 滚动条的宽度</span></span><br><span class="line">    <span class="comment">// 如果有竖向滚动条  isScroll要展示  证明 table的高度大于div的高度</span></span><br><span class="line">    <span class="comment">// alert(&#x27;2   &#x27;+$(&quot;.tablebox&quot;).height());</span></span><br><span class="line">    <span class="keyword">var</span> tableInnerHeight = $(<span class="string">&quot;.tablebox&quot;</span>).height() - $(<span class="string">&quot;.tableHeader&quot;</span>).height(); <span class="comment">// 计算tableInner的高度</span></span><br><span class="line">    <span class="keyword">var</span> tableInnerTableHeihgt = $(<span class="string">&quot;.tableInner table&quot;</span>).height(); <span class="comment">// tableInnde 中table的高度</span></span><br><span class="line">    <span class="keyword">var</span> tableboxWidth = $(<span class="string">&quot;.tablebox&quot;</span>).width();</span><br><span class="line">    <span class="keyword">var</span> tableboxHeight = $(<span class="string">&quot;.tablebox&quot;</span>).height();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tableInnerWidth = $(<span class="string">&quot;.tablebox&quot;</span>).width();</span><br><span class="line">    <span class="keyword">var</span> tableInnerTableWidth = $(<span class="string">&quot;.tableInner table&quot;</span>).width();</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.tableInner&quot;</span>).height(tableInnerHeight);</span><br><span class="line">    <span class="comment">// 判断是否有竖向滚动条</span></span><br><span class="line">    <span class="built_in">console</span>.log(tableInnerTableHeihgt);</span><br><span class="line">    <span class="built_in">console</span>.log(tableInnerHeight);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tableInnerTableWidth &gt; tableInnerWidth) &#123; <span class="comment">// 有横向滚动条</span></span><br><span class="line">        <span class="keyword">if</span> ((tableInnerTableHeihgt + scrollBarWidth) &gt; tableInnerHeight) &#123;</span><br><span class="line">            <span class="comment">// 有滚动条</span></span><br><span class="line">            <span class="comment">// var colLength = $(&quot;.tableHeader tr th&quot;).length;</span></span><br><span class="line">            <span class="comment">// if (colLength * 100 &lt;= tableboxWidth) &#123;  // 将出现滚动条</span></span><br><span class="line">            <span class="comment">// 现有列无法充满</span></span><br><span class="line">            $(<span class="string">&quot;.isScroll&quot;</span>).css(&#123;</span><br><span class="line">                width: scrollBarWidth,</span><br><span class="line">                <span class="string">&quot;min-width&quot;</span>: scrollBarWidth,</span><br><span class="line">                <span class="string">&#x27;box-sizing&#x27;</span>: <span class="string">&#x27;border-box&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;.tableInner table tr td:last-of-type&quot;</span>).css(<span class="string">&quot;border-right&quot;</span>, <span class="string">&quot;1px solid #ccc&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;.tablebox table tr th:nth-last-of-type(2)&quot;</span>).css(<span class="string">&quot;border-right&quot;</span>, <span class="string">&quot;1px solid #ccc&quot;</span>);</span><br><span class="line">            <span class="comment">// &#125;else&#123;    </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// alert(&#x27;没有滚动条&#x27;);</span></span><br><span class="line">            <span class="comment">// 没有滚动条</span></span><br><span class="line">            $(<span class="string">&quot;.isScroll&quot;</span>).css(&#123;</span><br><span class="line">                width: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;min-width&quot;</span>: <span class="string">&quot;0px&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;.tableInner table tr td:last-of-type&quot;</span>).css(<span class="string">&quot;border-right&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;.tablebox table tr th:nth-last-of-type(2)&quot;</span>).css(<span class="string">&quot;border-right&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有横向滚动条</span></span><br><span class="line">        $(<span class="string">&quot;.tableLeft .tableLeftBody&quot;</span>).css(<span class="string">&quot;height&quot;</span>, tableInnerHeight - scrollBarWidth + <span class="number">1</span>);</span><br><span class="line">        $(<span class="string">&quot;.tableLeft&quot;</span>).css(<span class="string">&quot;height&quot;</span>, $(<span class="string">&#x27;.tablebox&#x27;</span>).height() - scrollBarWidth);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有横向滚动条</span></span><br><span class="line">        <span class="keyword">if</span> (tableInnerTableHeihgt &gt; tableInnerHeight) &#123;</span><br><span class="line">            <span class="comment">// 有滚动条</span></span><br><span class="line">            <span class="comment">// var colLength = $(&quot;.tableHeader tr th&quot;).length;</span></span><br><span class="line">            <span class="comment">// if (colLength * 100 &lt;= tableboxWidth) &#123;  // 将出现滚动条</span></span><br><span class="line">            <span class="comment">// 现有列无法充满</span></span><br><span class="line">            $(<span class="string">&quot;.isScroll&quot;</span>).css(&#123;</span><br><span class="line">                width: scrollBarWidth,</span><br><span class="line">                <span class="string">&quot;min-width&quot;</span>: scrollBarWidth,</span><br><span class="line">                <span class="string">&#x27;box-sizing&#x27;</span>: <span class="string">&#x27;border-box&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;.tableInner table tr td:last-of-type&quot;</span>).css(<span class="string">&quot;border-right&quot;</span>, <span class="string">&quot;1px solid #ccc&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;.tablebox table tr th:nth-last-of-type(2)&quot;</span>).css(<span class="string">&quot;border-right&quot;</span>, <span class="string">&quot;1px solid #ccc&quot;</span>);</span><br><span class="line">            <span class="comment">// &#125;else&#123;    </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// alert(&#x27;没有滚动条&#x27;);</span></span><br><span class="line">            <span class="comment">// 没有滚动条</span></span><br><span class="line">            $(<span class="string">&quot;.isScroll&quot;</span>).css(&#123;</span><br><span class="line">                width: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;min-width&quot;</span>: <span class="string">&quot;0px&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;.tableInner table tr td:last-of-type&quot;</span>).css(<span class="string">&quot;border-right&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;.tablebox table tr th:nth-last-of-type(2)&quot;</span>).css(<span class="string">&quot;border-right&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有横向滚动条</span></span><br><span class="line">        <span class="comment">// var height =  $(&#x27;.tableLeft&#x27;).height() - $(&#x27;.tableLeftHeader&#x27;).height();</span></span><br><span class="line">        $(<span class="string">&quot;.tableLeft&quot;</span>).css(<span class="string">&quot;height&quot;</span>, <span class="string">&quot;100%&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;.tableLeft .tableLeftBody&quot;</span>).css(<span class="string">&quot;height&quot;</span>, tableInnerHeight);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置第一列的宽度</span></span><br><span class="line">        <span class="keyword">var</span> firstColWidth = $(<span class="string">&#x27;#tableHeaderHtml tr:first-of-type th&#x27;</span>).width();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(firstColWidth);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&#x27;.tableLeft table tr td&#x27;</span>).width(firstColWidth);</span><br><span class="line">        $(<span class="string">&#x27;.tableLeft table tr th&#x27;</span>).width(firstColWidth);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有横向滚动条</span></span><br><span class="line">    $(<span class="string">&quot;.tableInner&quot;</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.tableHeader&quot;</span>).scrollLeft($(<span class="built_in">this</span>).scrollLeft());</span><br><span class="line">        $(<span class="string">&quot;.tableLeft .tableLeftBody&quot;</span>).scrollTop($(<span class="built_in">this</span>).scrollTop());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给第一列设置宽度</span></span><br><span class="line">    <span class="comment">// 获取第一列的宽度，并设置给定位那层</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> firstColWidth = $(<span class="string">&quot;.tableInner tr:nth-of-type(2) td:nth-of-type(2)&quot;</span>).width();</span><br><span class="line">    <span class="comment">// alert(firstColWidth);</span></span><br><span class="line">    $(<span class="string">&quot;.tableLeft .tableLeftHeader tr th&quot;</span>).width(firstColWidth);</span><br><span class="line">    $(<span class="string">&quot;.tableLeft .tableLeftBody tr td&quot;</span>).width(firstColWidth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>原生js</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序实现全局代码高亮搜索</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%90%9C%E7%B4%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在做微信小程序的时候，需要实现在搜索框的输入内容的时候实现全局匹配实现高亮效果，目前的思路是，递归后台来返回的数据，并将对象的value值替换为需要的dom节点，并且通过rich-text来实现，高亮效果。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在实现的过程中主要考虑，不同类型的数据结构，过滤掉特殊符号，url这些基本需求；同时在实现的过程中每次都要去处理最原始的数据，这就需要考虑到对象的深拷贝问题，目前所采用的方法是通过JSON.parse(JSON.stringify(str))来处理，因为在这个全局搜索的项目中不太会用到函数这些对象。最后通过replace方法来处理这些目标字符串。</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="http://img.gaojingbo.com/miniProgramsearch.png"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>wxml:</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;homePage&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">bindinput</span>=<span class="string">&quot;bindKeyInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">newJson</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&#x27;item&#x27;</span> <span class="attr">wx:key</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span>   </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">item.address</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span>   </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">item.age</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">item.aihao</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">item.aihao</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&#x27;sitem&#x27;</span> <span class="attr">wx:key</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">sitem</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span>   </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>js:</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line">const app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">    data: <span class="type"></span>&#123;</span><br><span class="line">        homeUrl: <span class="type"></span>&#x27;../index/index<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        mineUrl: &#x27;</span>../mine/mine<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        newFillUrl: &#x27;</span>../<span class="keyword">new</span><span class="type">Fill</span>/<span class="keyword">new</span><span class="type">Fill</span>&#x27;,</span><br><span class="line">        historyUrl: <span class="type"></span>&#x27;../historyData/historyData<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        json: [&#123; name: &#x27;</span>你是谁<span class="string">&#x27;, age: &#x27;</span>awdqww\\k<span class="string">&#x27;, address: &#x27;</span>auemnkjkifwh&#123;\\efwfheffoewjowef<span class="string">&#x27;, aihao: [&#x27;</span>sdsd<span class="string">&#x27;, &#x27;</span>sdfsd<span class="string">&#x27;, &#x27;</span>sdsf<span class="string">&#x27;] &#125;, &#123; name: &#x27;</span><span class="number">98797</span><span class="string">&#x27;, age: &#x27;</span><span class="number">6544656</span><span class="string">&#x27;, address: &#x27;</span>https:<span class="type"></span>//www.baidu.com/<span class="string">&#x27; &#125;],</span></span><br><span class="line"><span class="string">        newJson: &#x27;</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        tempText: &#x27;</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        showShadow: false,</span></span><br><span class="line"><span class="string">        chartNumber: 0,</span></span><br><span class="line"><span class="string">        newStr:&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    onLoad: function (options) &#123;</span></span><br><span class="line"><span class="string">        this.setData(&#123;</span></span><br><span class="line"><span class="string">            newJson: this.data.json</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    haha: function () &#123;</span></span><br><span class="line"><span class="string">        console.log(&#x27;</span>haha<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">        wx.navigateTo(&#123;</span></span><br><span class="line"><span class="string">            url: &#x27;</span>../mine/mine<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    digui: function (newJson, obj, key) &#123;</span></span><br><span class="line"><span class="string">        var urlReg = new RegExp(&#x27;</span>(https ?|ftp | file):<span class="type"></span>//[-A-Za-z0<span class="number">-9</span>+&amp;@<span class="meta">#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]&#x27;)</span></span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">var</span> reg = that.data.tempText;</span><br><span class="line">        <span class="keyword">if</span> (that.data.tempText == <span class="string">&#x27;.&#x27;</span> || that.data.tempText == <span class="string">&#x27;\\&#x27;</span> || that.data.tempText == <span class="string">&#x27;\?&#x27;</span> || that.data.tempText == <span class="string">&#x27;\[&#x27;</span> || that.data.tempText == <span class="string">&#x27;\]&#x27;</span>) &#123;</span><br><span class="line">            reg = <span class="string">&#x27;\\&#x27;</span> + that.data.tempText</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="type">RegExp</span>(reg, <span class="string">&#x27;ig&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Json</span>.constructor == <span class="keyword">Array</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span><span class="type">Json</span>.forEach(<span class="function"><span class="keyword">function</span> </span>(item, index) &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.constructor == <span class="keyword">String</span> &amp;&amp; !urlReg.test(item)) &#123;</span><br><span class="line">                    obj[key].splice(index, <span class="number">1</span>, item.replace(reg, <span class="function"><span class="keyword">function</span> </span>(index) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (that.data.<span class="keyword">new</span><span class="type">Str</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                            that.setData(&#123;</span><br><span class="line">                                chartNumber: <span class="type"></span>(that.data.chartNumber + <span class="number">1</span>)</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span> + that.data.tempText + <span class="string">&quot;&lt;/span&gt;&quot;</span></span><br><span class="line">                    &#125;))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    that.digui(item, <span class="keyword">new</span><span class="type">Json</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Json</span>.constructor == Object) &#123;</span><br><span class="line">            <span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">new</span><span class="type">Json</span>) &#123;</span><br><span class="line">                json[key] = <span class="keyword">new</span><span class="type">Json</span>;</span><br><span class="line">                that.digui(<span class="keyword">new</span><span class="type">Json</span>[key], <span class="keyword">new</span><span class="type">Json</span>, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Json</span>.constructor == <span class="keyword">String</span> &amp;&amp; !urlReg.test(<span class="keyword">new</span><span class="type">Json</span>)) &#123; <span class="comment">// 这里做全局替换</span></span><br><span class="line">            <span class="keyword">if</span> (key) &#123;</span><br><span class="line">                obj[key] = <span class="keyword">new</span><span class="type">Json</span>.replace(reg, <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">                    <span class="keyword">if</span> (that.data.<span class="keyword">new</span><span class="type">Str</span> != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                        that.setData(&#123;</span><br><span class="line">                            chartNumber: <span class="type"></span>(that.data.chartNumber + <span class="number">1</span>)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span> + that.data.tempText + <span class="string">&quot;&lt;/span&gt;&quot;</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showBgShadow: <span class="type">function </span>(e) &#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            showShadow: <span class="type">e</span>.detail.showBgShadow</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    bindKeyInput: <span class="type">function </span>(e) &#123;</span><br><span class="line">        <span class="keyword">var</span> regChart = <span class="built_in">this</span>.data.regChart;</span><br><span class="line">        <span class="keyword">var</span> text = e.detail.value;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">new</span><span class="type">Str</span> = text.replace(/[\@\<span class="meta">#\$\%\^\&amp;\*\&#123;\&#125;\:\&quot;\L\&lt;\&gt;\?\\\.]/, &#x27;&#x27;)</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            tempText: <span class="type">newStr</span>,</span><br><span class="line">            chartNumber: <span class="type">0</span>,</span><br><span class="line">            <span class="keyword">new</span><span class="type">Str</span>: <span class="keyword">new</span><span class="type">Str</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Json</span> = JSON.parse(JSON.stringify(<span class="built_in">this</span>.data.json));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.digui(<span class="keyword">new</span><span class="type">Json</span>);</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="keyword">new</span><span class="type">Json</span>: <span class="keyword">new</span><span class="type">Json</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>快速获取json键值对的key名和快速根据value分组</title>
    <url>/%E5%BF%AB%E9%80%9F%E8%8E%B7%E5%8F%96json%E9%94%AE%E5%80%BC%E5%AF%B9%E7%9A%84key%E5%90%8D%E5%92%8C%E5%BF%AB%E9%80%9F%E6%A0%B9%E6%8D%AEvalue%E5%88%86%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近项目中后台给返回的数据很复杂，需要各种遍历，组合，其中Object.keys(obj)和通过封装的groupBy这两个方法带给了我极大的便利</p>
<span id="more"></span>
<h3 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/* Array 对象 */</span> </span><br><span class="line">let arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">console.log(Object.keys(arr)); </span><br><span class="line"><span class="regexp">//</span> [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="regexp">/* Object 对象 */</span> </span><br><span class="line">let obj = &#123; foo: <span class="string">&quot;bar&quot;</span>, baz: <span class="number">42</span> &#125;, </span><br><span class="line">console</span><br><span class="line">log(Object.keys(obj));</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> [<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;baz&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="regexp">/* 类数组 对象 */</span> </span><br><span class="line">let obj = &#123; <span class="number">0</span> : <span class="string">&quot;a&quot;</span>, <span class="number">1</span> : <span class="string">&quot;b&quot;</span>, <span class="number">2</span> : <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">console.log(Object.keys(obj)); </span><br><span class="line"><span class="regexp">//</span> [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="groupBy方法以及用到的reduce详解"><a href="#groupBy方法以及用到的reduce详解" class="headerlink" title="groupBy方法以及用到的reduce详解"></a>groupBy方法以及用到的reduce详解</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span>.prototype.groupBy = <span class="keyword">function</span>(prop) &#123;</span><br><span class="line">  <span class="keyword">return</span> this.reduce(<span class="keyword">function</span>(<span class="keyword">groups</span>, item) &#123;</span><br><span class="line">    var val = item[prop];</span><br><span class="line">    <span class="keyword">groups</span>[val] = <span class="keyword">groups</span>[val] || [];</span><br><span class="line">    <span class="keyword">groups</span>[val].push(item);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">groups</span>;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var myList = [</span><br><span class="line">  &#123;<span class="type">time</span>: <span class="string">&#x27;12:00&#x27;</span>, <span class="keyword">location</span>: <span class="string">&#x27;mall&#x27;</span>    &#125;,</span><br><span class="line">  &#123;<span class="type">time</span>: <span class="string">&#x27;9:00&#x27;</span>,  <span class="keyword">location</span>: <span class="string">&#x27;store&#x27;</span>   &#125;,</span><br><span class="line">  &#123;<span class="type">time</span>: <span class="string">&#x27;9:00&#x27;</span>,  <span class="keyword">location</span>: <span class="string">&#x27;mall&#x27;</span>    &#125;,</span><br><span class="line">  &#123;<span class="type">time</span>: <span class="string">&#x27;12:00&#x27;</span>, <span class="keyword">location</span>: <span class="string">&#x27;store&#x27;</span>   &#125;,</span><br><span class="line">  &#123;<span class="type">time</span>: <span class="string">&#x27;12:00&#x27;</span>, <span class="keyword">location</span>: <span class="string">&#x27;market&#x27;</span>  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">var byTime = myList.groupBy(<span class="string">&#x27;time&#x27;</span>);</span><br><span class="line"></span><br><span class="line">byTime = &#123;</span><br><span class="line">    <span class="string">&#x27;9:00&#x27;</span>: [</span><br><span class="line">      &#123;<span class="type">time</span>: <span class="string">&#x27;9:00&#x27;</span>,  <span class="keyword">location</span>: <span class="string">&#x27;store&#x27;</span> &#125;,</span><br><span class="line">      &#123;<span class="type">time</span>: <span class="string">&#x27;9:00&#x27;</span>,  <span class="keyword">location</span>: <span class="string">&#x27;mall&#x27;</span>  &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;12:00&#x27;</span>: [</span><br><span class="line">      &#123;<span class="type">time</span>: <span class="string">&#x27;12:00&#x27;</span>, <span class="keyword">location</span>: <span class="string">&#x27;mall&#x27;</span>  &#125;,</span><br><span class="line">      &#123;<span class="type">time</span>: <span class="string">&#x27;12:00&#x27;</span>, <span class="keyword">location</span>: <span class="string">&#x27;store&#x27;</span> &#125;,</span><br><span class="line">      &#123;<span class="type">time</span>: <span class="string">&#x27;12:00&#x27;</span>, <span class="keyword">location</span>: <span class="string">&#x27;market&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span><span class="params">(sum, value)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sum + value;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">// total is <span class="number">6</span></span><br><span class="line"></span><br><span class="line">var flattened = <span class="string">[[0, 1], [2, 3], [4, 5]]</span>.reduce(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="built_in">concat</span>(b);</span><br><span class="line">&#125;, []);</span><br><span class="line">// flattened is [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>callback<br>执行数组中每个值的函数，包含四个参数：</p>
<pre><code>accumulator
累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。

currentValue
数组中正在处理的元素。

currentIndex
数组中正在处理的当前元素的索引。如果提供了initialValue，则索引号为0，否则为索引为1。

array
调用reduce的数组
</code></pre>
<p>initialValue<br>[可选] 用作第一个调用 callback的第一个参数的值。如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Array.prototype.groupBy = function(prop) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.reduce(function(groups, item) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">val</span> = item[prop];    <span class="comment">// 取出time 例如 9：00</span></span><br><span class="line">    groups[<span class="keyword">val</span>] = groups[<span class="keyword">val</span>] || [];  <span class="comment">// 每一次取出groups中的9：00对象，如果存在（覆盖一次），如果是12：00对象则赋值新数组</span></span><br><span class="line">    groups[<span class="keyword">val</span>].push(item);</span><br><span class="line">    <span class="keyword">return</span> groups;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>原生js</category>
      </categories>
      <tags>
        <tag>原生js</tag>
      </tags>
  </entry>
  <entry>
    <title>项目总结(2017年11月)</title>
    <url>/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-2017%E5%B9%B411%E6%9C%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>6月份的时候做过一段时间的vue开发，之后换工作，了解到目前所在的公司是打算使用node来做服务端渲染，当时对node的接触很少，或许可以通过这个项目，可以让我对node有更多的了解，所以就决定接受目前这家公司的offer。在开发过程中遇到了很多问题，在这里做记录备忘。</p>
<span id="more"></span>
<p>express + jade + layui</p>
<h2 id="express通过post请求跳转页面"><a href="#express通过post请求跳转页面" class="headerlink" title="express通过post请求跳转页面"></a>express通过post请求跳转页面</h2><p>在项目首页，点设置按钮会调转到用户的设置中心页面，刚开始是直接通过更改location.href的路径并且将一些参数拼接到url后面的方式来做页面跳转，但是这样貌似看着不是很好看，所以就决定将跳转的方式改为post的方式，将需要渲染的数据通过post的方式传给express路由，下面上一个小例子：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	url:userPath+<span class="string">&#x27;/menu&#x27;</span>,</span><br><span class="line">	<span class="built_in">type</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">	async:<span class="literal">false</span>,</span><br><span class="line">	data:&#123;</span><br><span class="line">		menuArr:JSON.stringify(menuArr)</span><br><span class="line">	&#125;,</span><br><span class="line">	success:<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(res === <span class="string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="line">			location.href = userPath+<span class="string">&#x27;/userinfo-company&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="built_in">error</span>:<span class="function"><span class="keyword">function</span><span class="params">(error)</span></span>&#123;</span><br><span class="line">		console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/menu&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    menuArr = <span class="built_in">JSON</span>.parse(req.body.menuArr);</span><br><span class="line">    res.send(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/userinfo-company&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    subMenuArr = menuArr[<span class="number">0</span>];</span><br><span class="line">    res.render(</span><br><span class="line">        <span class="string">&#x27;userInfo/company&#x27;</span>,</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;企业资料&#x27;</span>,</span><br><span class="line">            <span class="attr">menuArr</span>: menuArr,</span><br><span class="line">            <span class="attr">subMenuArr</span>:subMenuArr</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>menu需要从后台请求，通过jade来渲染，所以需要将menu的数组通过post的方式来传递给index路由。</p>
<h2 id="用js给select标签的option选项设置选中状态"><a href="#用js给select标签的option选项设置选中状态" class="headerlink" title="用js给select标签的option选项设置选中状态"></a>用js给select标签的option选项设置选中状态</h2><p>在做省市县三级联动的时候，需要给的select动态加载option选项，并且动态设置默认状态，我当时首先想到的就是</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.selector&quot;</span>).<span class="builtin-name">find</span>(<span class="string">&quot;option[text=&#x27;xxx&#x27;]&quot;</span>).attr(<span class="string">&quot;selected&quot;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>但是经过测试这种方法没有起作用，因为[]是attribute选择器，text是property，所以选不到，这里可以用JQuery的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.selector&quot;</span>).<span class="builtin-name">find</span>(<span class="string">&quot;option:contains(&#x27;pxx&#x27;)&quot;</span>).attr(<span class="string">&quot;selected&quot;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>选择器给option设置默认选中状态。</p>
<h2 id="attribute和property的不同"><a href="#attribute和property的不同" class="headerlink" title="attribute和property的不同"></a>attribute和property的不同</h2><p>property是DOM中的属性，是JavaScript里的对象，每一个dom节点都是一个对象，这些dom对象有很多属性，例如：clientHeight，className，innerHTML，innerText等；</p>
<p>attribute是HTML标签上的特性，它的值只能够是字符串，例如：class，id，value等；</p>
下面一行代码看懂attribute和property：

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;obox&#x27;</span> <span class="attr">title</span>=<span class="string">&#x27;divTitle&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;divName&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> obox = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;obox&#x27;</span>);</span></span><br><span class="line"><span class="javascript">		<span class="built_in">console</span>.dir(obox);</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打印的输出结果如下，同时我们还可以在第四行看到attribute属性<br><img src="http://p11ppck5c.bkt.clouddn.com/Property&Attribute.png"></p>
]]></content>
      <categories>
        <category>项目总结</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6学习总结</title>
    <url>/ES6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在学习es6的过程中，为了方便自己复习，以及查看，对api做了一个简单的用例介绍。</p>
<span id="more"></span>
<h1 id="一-let和const"><a href="#一-let和const" class="headerlink" title="一 let和const"></a>一 let和const</h1><h2 id="1-let"><a href="#1-let" class="headerlink" title="1.let"></a>1.let</h2><p>(1)一个大括号就是一个块级作用域，let声明的变量只在自己作用域有效；<br>(2)es6强制开启严格模式，变量未声明不能引用，所以会报 Uncaught ReferenceError</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure>
<p>(3)let不能重复声明</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function">  let a = 1; </span></span></span><br><span class="line"><span class="comment"><span class="function">  let a = 2;</span></span></span><br><span class="line"><span class="comment"><span class="function">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure>
<p>(4)let不存在变量提升(这个地方有问题)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> var 的情况</span><br><span class="line">console.log(a); <span class="regexp">//</span> 输出undefined</span><br><span class="line">var a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> let 的情况</span><br><span class="line">console.log(b); <span class="regexp">//</span> 报错ReferenceError</span><br><span class="line">let b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-const"><a href="#2-const" class="headerlink" title="2.const"></a>2.const</h2><p>(1)const声明之后必须赋值，否则会编译不通过；<br>(2)const声明的值不允许修改；</p>
<figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">PI</span> = <span class="number">3.14</span>;</span><br><span class="line">// <span class="built_in">PI</span> = <span class="number">2</span>;  </span><br><span class="line">// <span class="keyword">const</span> <span class="built_in">PI</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">PI</span>);</span><br></pre></td></tr></table></figure>
<p>(3)const如果是对象的话，可以向对象中添加属性，也可以修改a的属性；json是指向内存地址的一个指针，指针的指向不变，但是那个被json指针所指向的内存地址所存储的内容是可以变化的；</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">const <span class="type">json</span> = &#123;</span><br><span class="line">  a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">json</span>.a = <span class="number">3</span>;</span><br><span class="line"><span class="type">json</span>.b = <span class="number">3</span>;</span><br><span class="line">console.log(<span class="type">json</span>.a)   //<span class="number">3</span></span><br><span class="line">console.log(<span class="type">json</span>.b)   //<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="二-解构赋值"><a href="#二-解构赋值" class="headerlink" title="二 解构赋值"></a>二 解构赋值</h1><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h2><p>先上两个例子了解什么是解构赋值</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> a, b, <span class="built_in">rest</span>;</span><br><span class="line">  [a, b, <span class="built_in">rest</span>] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">  console.<span class="built_in">log</span>(a, b, <span class="built_in">rest</span>);   //<span class="number">1</span> <span class="number">2</span> undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> a, b, <span class="built_in">rest</span>;</span><br><span class="line">  [a, b, ...<span class="built_in">rest</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line">  console.<span class="built_in">log</span>(a, b, <span class="built_in">rest</span>);   //<span class="number">1</span> <span class="number">2</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-对象的解构赋值"><a href="#2-对象的解构赋值" class="headerlink" title="2.对象的解构赋值"></a>2.对象的解构赋值</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let a, b;</span><br><span class="line">  (&#123; a, b &#125; = &#123; a: <span class="number">1</span>, b: <span class="number">2</span> &#125;)<span class="comment">;  //a，b 顺序不影响其结构结果</span></span><br><span class="line">  console.log(<span class="name">a</span>, b)<span class="comment">; // 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-默认值"><a href="#3-默认值" class="headerlink" title="3.默认值"></a>3.默认值</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> a, b, <span class="built_in">rest</span>;</span><br><span class="line">  [a, b, <span class="built_in">rest</span> = <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">console.<span class="built_in">log</span>(a, b, <span class="built_in">rest</span>); // <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-实际应用"><a href="#4-实际应用" class="headerlink" title="4.实际应用"></a>4.实际应用</h2><h3 id="变量的交换"><a href="#变量的交换" class="headerlink" title="变量的交换"></a>变量的交换</h3><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let a = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">  let b = <span class="number">2</span><span class="comment">;</span></span><br><span class="line">  [a, b] = [b, a]<span class="comment">;</span></span><br><span class="line">  console.log(<span class="name">a</span>, b)<span class="comment">;  //2 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接收函数返回的值"><a href="#接收函数返回的值" class="headerlink" title="接收函数返回的值"></a>接收函数返回的值</h3><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  function f() &#123;</span><br><span class="line">    return [<span class="number">12</span>, <span class="number">13</span>]<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  let a, b;</span><br><span class="line">  [a, b] = f()<span class="comment">;</span></span><br><span class="line">  console.log(<span class="name">a</span>, b)<span class="comment">; //12 13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  function f() &#123;</span><br><span class="line">    return [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  let a, b;</span><br><span class="line">  [a, , , b] = f()<span class="comment">;  //函数返回多个值，可以选择性的接收对应的值</span></span><br><span class="line">  console.log(<span class="name">a</span>, b)<span class="comment">; // 12 16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  function f() &#123;</span><br><span class="line">    return [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  let a, b;</span><br><span class="line">  [a, , ...b] = f()<span class="comment">;  //取出对应的值，其他的值可以直接赋值给数据</span></span><br><span class="line">  console.log(<span class="name">a</span>, b)<span class="comment">; // 12 [14, 15, 16]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-对象的解构赋值的应用"><a href="#5-对象的解构赋值的应用" class="headerlink" title="5.对象的解构赋值的应用"></a>5.对象的解构赋值的应用</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let o = &#123; p: <span class="number">42</span>, q: <span class="literal">true</span> &#125;<span class="comment">;</span></span><br><span class="line">  let &#123; p, q &#125; = o;</span><br><span class="line">  console.log(<span class="name">p</span>, q)<span class="comment">; //42 true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let &#123; a = <span class="number">10</span>, b = <span class="number">11</span> &#125; = &#123; a: <span class="number">3</span> &#125;  // 对象的默认值更改</span><br><span class="line">  console.log(<span class="name">a</span>,b)<span class="comment">; // 3, 11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-解构赋值的简单应用举例"><a href="#6-解构赋值的简单应用举例" class="headerlink" title="6.解构赋值的简单应用举例"></a>6.解构赋值的简单应用举例</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let metaData = &#123;</span><br><span class="line">    title: &#x27;abc&#x27;,</span><br><span class="line">    test: [&#123;</span><br><span class="line">      title: &#x27;gaojingbo&#x27;,</span><br><span class="line">      desc: &#x27;description&#x27;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  let &#123; title: esTitle, test: [&#123; title: cnTitle &#125;] &#125; = metaData;</span><br><span class="line">  console.log(<span class="name">esTitle</span>, cnTitle)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三-正则的扩展"><a href="#三-正则的扩展" class="headerlink" title="三 正则的扩展"></a>三 正则的扩展</h1><h2 id="1-构造函数来创建正则"><a href="#1-构造函数来创建正则" class="headerlink" title="1.构造函数来创建正则"></a>1.构造函数来创建正则</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> regex1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;xyz&#x27;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> regex2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(regex1.test(<span class="string">&#x27;xyz123&#x27;</span>), regex2.test(<span class="string">&#x27;xyz123&#x27;</span>)); <span class="comment">// true true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> regex3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/ig</span>, <span class="string">&#x27;i&#x27;</span>); <span class="comment">// 后面的修饰符会把前面的修饰符给覆盖掉</span></span><br><span class="line">  <span class="built_in">console</span>.log(regex3.flags);  <span class="comment">// es6新增的，用来获取正则表达式的修饰符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-g修饰符和y修饰符"><a href="#2-g修饰符和y修饰符" class="headerlink" title="2.g修饰符和y修饰符"></a>2.g修饰符和y修饰符</h2><p>y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="string">&#x27;bbb_bb_b&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> a1 = <span class="regexp">/b+/g</span>; <span class="comment">// g只要匹配到都算</span></span><br><span class="line">  <span class="keyword">let</span> a2 = <span class="regexp">/b+/y</span>; <span class="comment">// y必须是下一个开始的字母开始匹配</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;one&#x27;</span>, a1.exec(s), a2.exec(s)); <span class="comment">// g修饰符匹配到都可以，y修饰符必须从第一个开始匹配，如果一第个不是b则会输出null</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;two&#x27;</span>, a1.exec(s), a2.exec(s)); <span class="comment">// 第二次匹配，g修饰符会只要匹配到都可以，y修饰符必须从紧邻的下一个字符开始匹配</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(a1.sticky, a2.sticky); <span class="comment">// 判断是否开启了y修饰符   false true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>one和two的输出结果<br><img src="http://img.gaojingbo.com/image/blog/es6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.png"></p>
<h2 id="3-u修饰符-unicode"><a href="#3-u修饰符-unicode" class="headerlink" title="3.u修饰符(unicode)"></a>3.u修饰符(unicode)</h2><p>ES6 对正则表达式添加了u修饰符，含义为“Unicode模式”，用来正确处理大于\uFFFF的 Unicode 字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;u-1&#x27;</span>, <span class="regexp">/^\uD83D/</span>.test(<span class="string">&#x27;\uD83D\uDC2A&#x27;</span>)); <span class="comment">// 不加u把后面的四个字节当成两个字符</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;u-2&#x27;</span>, <span class="regexp">/^\uD83D/u</span>.test(<span class="string">&#x27;\uD83D\uDC2A&#x27;</span>)); <span class="comment">// 加u把后面的4个字节当作一个字符</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/</span>.test(<span class="string">&#x27;a&#x27;</span>));  <span class="comment">// false 大括号括起来代表一个unicode字符，所以必须加u才能识别</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/u</span>.test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`\u&#123;20BB7&#125;`</span>);</span><br><span class="line">  <span class="keyword">let</span> s = <span class="string">&#x27;𠮷&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;u-1&#x27;</span>, <span class="regexp">/^.$/</span>.test(s));  <span class="comment">//false 字符串大于两个字节，必须加u修饰符才能匹配到</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;u-2&#x27;</span>, <span class="regexp">/^.$/u</span>.test(s)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test-1&#x27;</span>, <span class="regexp">/𠮷&#123;2&#125;/</span>.test(<span class="string">&#x27;𠮷𠮷&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test-2&#x27;</span>, <span class="regexp">/𠮷&#123;2&#125;/u</span>.test(<span class="string">&#x27;𠮷𠮷&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四-字符串扩展"><a href="#四-字符串扩展" class="headerlink" title="四 字符串扩展"></a>四 字符串扩展</h1><h2 id="1-unicode的表示方法"><a href="#1-unicode的表示方法" class="headerlink" title="1.unicode的表示方法"></a>1.unicode的表示方法</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.<span class="built_in">log</span>(&#x27;a&#x27;, &#x27;\u<span class="number">0061</span>&#x27;); <span class="comment">// a a</span></span><br><span class="line">  console.<span class="built_in">log</span>(&#x27;s&#x27;, &#x27;\u20BB7&#x27;); <span class="comment">// s ₻7  把前两个字节当作一个整体</span></span><br><span class="line">  console.<span class="built_in">log</span>(&#x27;s&#x27;, &#x27;\u&#123;20BB7&#125;&#x27;); <span class="comment">// s 𠮷  unicode编码用&#123;&#125;可以正常识别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-codePointAt和charCodeAt的对比"><a href="#2-codePointAt和charCodeAt的对比" class="headerlink" title="2.codePointAt和charCodeAt的对比"></a>2.codePointAt和charCodeAt的对比</h2><p>对于4个字节的字符，JavaScript不能正确处理，字符串长度会误判为2，而且charAt方法无法读取整个字符，charCodeAt方法只能分别返回前两个字节和后两个字节的值。ES6提供了codePointAt方法，能够正确处理4个字节储存的字符，返回一个字符的码点。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   let s = <span class="string">&#x27;𠮷&#x27;</span>;</span><br><span class="line">   console.log(s.length);  <span class="regexp">//</span> <span class="number">2</span></span><br><span class="line">   console.log(<span class="string">&#x27;0&#x27;</span>, s.charAt(<span class="number">0</span>));  <span class="regexp">//</span> <span class="number">0</span> �   <span class="regexp">//</span>es5未对多个字节的字符做处理</span><br><span class="line">   console.log(<span class="string">&#x27;1&#x27;</span>, s.charAt(<span class="number">1</span>));  <span class="regexp">//</span> <span class="number">1</span> �</span><br><span class="line">   console.log(<span class="string">&#x27;at0&#x27;</span>, s.charCodeAt(<span class="number">0</span>));  <span class="regexp">//</span>at0 <span class="number">55362</span></span><br><span class="line">   console.log(<span class="string">&#x27;at1&#x27;</span>, s.charCodeAt(<span class="number">1</span>));  <span class="regexp">//</span>at1 <span class="number">57271</span></span><br><span class="line">   </span><br><span class="line">   let s1 = <span class="string">&#x27;𠮷a&#x27;</span>;</span><br><span class="line">   console.log(<span class="string">&#x27;length&#x27;</span>, s1.length); <span class="regexp">//</span> <span class="number">3</span></span><br><span class="line">   console.log(<span class="string">&#x27;code0&#x27;</span>, s1.codePointAt(<span class="number">0</span>)); <span class="regexp">//</span> code0 <span class="number">134071</span></span><br><span class="line">   console.log(<span class="string">&#x27;code0&#x27;</span>, s1.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));  <span class="regexp">//</span> code0 es6会自动把多个字节的字符当作一个整体来处理 </span><br><span class="line">   console.log(<span class="string">&#x27;code1&#x27;</span>, s1.codePointAt(<span class="number">1</span>)); <span class="regexp">//</span> code1 <span class="number">57271</span></span><br><span class="line">   console.log(<span class="string">&#x27;code2&#x27;</span>, s1.codePointAt(<span class="number">2</span>)); <span class="regexp">//</span> code2 <span class="number">97</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-fromCharCode和fromCodePoint"><a href="#3-fromCharCode和fromCodePoint" class="headerlink" title="3.fromCharCode和fromCodePoint"></a>3.fromCharCode和fromCodePoint</h2><p>ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别Unicode编号大于0xFFFF。ES6提供了String.fromCodePoint方法，可以识别大于0xFFFF的字符，弥补了String.fromCharCode方法的不足。在作用上，正好与codePointAt方法相反。注意，fromCodePoint方法定义在String对象上，而codePointAt方法定义在字符串的实例对象上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="string">&#x27;0x20bb7&#x27;</span>));  <span class="comment">//ஷ</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="string">&#x27;0x20bb7&#x27;</span>))  <span class="comment">//𠮷</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-字符串遍历器"><a href="#4-字符串遍历器" class="headerlink" title="4.字符串遍历器"></a>4.字符串遍历器</h2><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// es5</span></span><br><span class="line">  <span class="built_in">let</span> <span class="built_in">str</span> = &#x27;\u&#123;<span class="number">20</span>bb7&#125;abc&#x27;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">str</span>.length; i++) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(&#x27;es5&#x27;, <span class="built_in">str</span>[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//� � a b c   </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//es6</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> code of <span class="built_in">str</span>) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(&#x27;es6&#x27;, code);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 𠮷 a b c</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-一些常用的字符串api"><a href="#5-一些常用的字符串api" class="headerlink" title="5.一些常用的字符串api"></a>5.一些常用的字符串api</h2><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let <span class="built_in">str</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;includes&#x27;</span>, <span class="built_in">str</span>.includes(<span class="string">&#x27;c&#x27;</span>));  <span class="comment">// 判断是否包含  false</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;start&#x27;</span>, <span class="built_in">str</span>.startsWith(<span class="string">&#x27;s&#x27;</span>));   <span class="comment">// 以什么开头  true</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;end&#x27;</span>, <span class="built_in">str</span>.endsWith(<span class="string">&#x27;ng&#x27;</span>));   <span class="comment">// 以什么结尾   true</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;repeat&#x27;</span>, <span class="built_in">str</span>.repeat(<span class="number">2</span>));     <span class="comment">// 字符串重复两次  stringstring</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ES6 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(&#x27;1&#x27;.padStart(<span class="number">2</span>,&#x27;0&#x27;)); <span class="comment">// 01</span></span><br><span class="line">    console.<span class="built_in">log</span>(&#x27;1&#x27;.padEnd(<span class="number">2</span>,&#x27;0&#x27;)); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="6-模板字符串"><a href="#6-模板字符串" class="headerlink" title="6.模板字符串"></a>6.模板字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;List&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> info = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> m = <span class="string">`i am <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;info&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(m);  <span class="comment">//i am List hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-标签模板"><a href="#7-标签模板" class="headerlink" title="7.标签模板"></a>7.标签模板</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let <span class="keyword">user</span> = &#123;</span><br><span class="line">    <span class="type">name</span>:<span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">    <span class="keyword">info</span>:<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> fn(s,v1,v2)&#123;</span><br><span class="line">    console.log(s,v1,v2);</span><br><span class="line">    <span class="keyword">return</span> s+v1+v2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  console.log(fn`i am $&#123;<span class="keyword">user</span>.name&#125; $&#123;<span class="keyword">user</span>.<span class="keyword">info</span>&#125;`)  // ``符号相当于一个函数的参数fn(i am $&#123;<span class="keyword">user</span>.name&#125; $&#123;<span class="keyword">user</span>.<span class="keyword">info</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="http://img.gaojingbo.com/image/blog/es6%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF.png"></p>
<h2 id="8-String-row-API"><a href="#8-String-row-API" class="headerlink" title="8.String.row API"></a>8.String.row API</h2><p>ES6还为原生的String对象，提供了一个raw方法。String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;raw &#x27;</span>+<span class="built_in">String</span>.raw<span class="string">`hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;noRaw &#x27;</span>+<span class="string">`hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="http://img.gaojingbo.com/image/blog/es6String.rawAPI.PNG"></p>
<h1 id="五-数值扩展"><a href="#五-数值扩展" class="headerlink" title="五 数值扩展"></a>五 数值扩展</h1><h2 id="1-二进制八进制表示法"><a href="#1-二进制八进制表示法" class="headerlink" title="1.二进制八进制表示法"></a>1.二进制八进制表示法</h2><p>从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀0表示，ES6进一步明确，要使用前缀0o表示。如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.<span class="built_in">log</span>(&#x27;B&#x27;,<span class="number">0b11010101010</span>);  //二进制表示，b大小写都可以</span><br><span class="line">  console.<span class="built_in">log</span>(&#x27;O&#x27;,<span class="number">0O1237637236</span>);  // 八进制表示法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Number-isFinite-和Number-isNaN"><a href="#2-Number-isFinite-和Number-isNaN" class="headerlink" title="2.Number.isFinite()和Number.isNaN()"></a>2.Number.isFinite()和Number.isNaN()</h2><p>Number.isFinite()用来判断数字是否有限（无尽小数），Number.isNaN()来判断一个数是不是小数</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;15&#x27;</span>,<span class="built_in">isFinite</span>(<span class="number">15</span>));    //<span class="literal">true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;NaN&#x27;</span>,<span class="built_in">isFinite</span>(<span class="literal">NaN</span>));  //<span class="literal">false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;1/0&#x27;</span>,<span class="built_in">isFinite</span>(<span class="number">1</span>/<span class="number">0</span>));  //<span class="literal">false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;isNaN&#x27;</span>,<span class="built_in">Number</span>.<span class="built_in">isNaN</span>(<span class="number">15</span>)); <span class="regexp">//</span> <span class="literal">false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;isNaN&#x27;</span>,<span class="built_in">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));  <span class="regexp">//</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Number-isInteger"><a href="#3-Number-isInteger" class="headerlink" title="3.Number.isInteger"></a>3.Number.isInteger</h2><p>Number.isInteger用来判断一个数是不是整数</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;13&#x27;</span>,<span class="built_in">Number</span>.isInteger(<span class="number">13</span>));      <span class="regexp">//</span> <span class="literal">true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;13.0&#x27;</span>,<span class="built_in">Number</span>.isInteger(<span class="number">13.0</span>));  <span class="regexp">//</span> <span class="literal">true</span> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;13.1&#x27;</span>,<span class="built_in">Number</span>.isInteger(<span class="number">13.1</span>));  //<span class="literal">false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;13&#x27;</span>,<span class="built_in">Number</span>.isInteger(<span class="string">&#x27;13&#x27;</span>));    <span class="regexp">//</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-Number-MAX-SAFE-INTEGER-Number-MIN-SFAE-INTEGER和isSafeInterger"><a href="#4-Number-MAX-SAFE-INTEGER-Number-MIN-SFAE-INTEGER和isSafeInterger" class="headerlink" title="4.Number.MAX_SAFE_INTEGER,Number.MIN_SFAE_INTEGER和isSafeInterger"></a>4.Number.MAX_SAFE_INTEGER,Number.MIN_SFAE_INTEGER和isSafeInterger</h2><p>Number.MAX_SAFE_INTEGER,Number.MIN_SFAE_INTEGER表示js可以准确表示的值的范围，isSafeInterger用来判断这个值是否在安全范围内。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">Number</span>.MAX_SAFE_INTEGER,<span class="built_in">Number</span>.MIN_SFAE_INTEGER)<span class="comment">;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;15&#x27;</span>,<span class="built_in">Number</span>.isSafeInteger(<span class="number">15</span>))<span class="comment">;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;9999999999999999999999&#x27;</span>,<span class="built_in">Number</span>.isSafeInteger(<span class="number">9999999999999999999999</span>))<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-Math-trunc和Math-sign"><a href="#5-Math-trunc和Math-sign" class="headerlink" title="5.Math.trunc和Math.sign"></a>5.Math.trunc和Math.sign</h2><p>Math.trunc方法用于去除一个数的小数部分，返回整数部分。Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;4.1&#x27;</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.1</span>));   <span class="comment">//4</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;4.9&#x27;</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.9</span>));   <span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;-5&#x27;</span>,<span class="built_in">Math</span>.sign(-<span class="number">5</span>))    <span class="comment">//-1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>,<span class="built_in">Math</span>.sign(<span class="number">5</span>))      <span class="comment">//+1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;0&#x27;</span>,<span class="built_in">Math</span>.sign(<span class="number">0</span>))      <span class="comment">//0</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;50&#x27;</span>,<span class="built_in">Math</span>.sign(<span class="number">50</span>))    <span class="comment">//+1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;NaN&#x27;</span>,<span class="built_in">Math</span>.sign(<span class="literal">NaN</span>))  <span class="comment">//NaN</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="6-cbrt"><a href="#6-cbrt" class="headerlink" title="6.cbrt"></a>6.cbrt</h2><p>cbrt用来计算一个数的开方</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.<span class="built_in">log</span>(&#x27;-1&#x27;,cbrt(-<span class="number">1</span>));   <span class="comment">//-1</span></span><br><span class="line">  console.<span class="built_in">log</span>(&#x27;8&#x27;,cbrt(<span class="number">8</span>));     <span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="六-数组扩展"><a href="#六-数组扩展" class="headerlink" title="六 数组扩展"></a>六 数组扩展</h1><h2 id="1-Array-of"><a href="#1-Array-of" class="headerlink" title="1. Array.of"></a>1. Array.of</h2><p>Array.of方法用于将一组值，转换为数组,这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;arr=&#x27;</span>,arr);  <span class="comment">// arr= [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> emptyArr = <span class="built_in">Array</span>.of();</span><br><span class="line">  <span class="built_in">console</span>.log(emptyArr);  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//与Array方法对比</span></span><br><span class="line">  <span class="built_in">Array</span>() <span class="comment">// []</span></span><br><span class="line">  <span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line">  <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Array-from"><a href="#2-Array-from" class="headerlink" title="2.Array.from"></a>2.Array.from</h2><p>Array.from方法用于将两类对象转为真正的数组：类似数组的对象和可遍历的对象（包括ES6新增的数据结构Set和Map）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;你好&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大家好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> pArr = <span class="built_in">Array</span>.from(p);</span><br><span class="line">  pArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.textContent);  <span class="comment">// 你好 我好 大家好</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item*<span class="number">2</span>&#125;)) <span class="comment">// [2,6,10]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Array-fill"><a href="#3-Array-fill" class="headerlink" title="3.Array.fill"></a>3.Array.fill</h2><p>fill方法使用给定值，填充一个数组。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;fill-7&#x27;</span>,[<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;undefined&#x27;</span>].fill(<span class="number">7</span>));   <span class="regexp">//</span>[<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>]</span><br><span class="line">  console.log(<span class="string">&#x27;fill,pos&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>].fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">4</span>)); <span class="regexp">//</span>[<span class="number">1</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>]  <span class="regexp">//</span> 后两个参数表示索引的位置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-entries-，keys-和-values"><a href="#4-entries-，keys-和-values" class="headerlink" title="4.entries()，keys() 和 values()"></a>4.entries()，keys() 和 values()</h2><p>ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(let index of [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].keys())&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;index&#x27;</span>,index);</span><br><span class="line">   <span class="regexp">//</span> index <span class="number">0</span></span><br><span class="line">   <span class="regexp">//</span> index <span class="number">1</span></span><br><span class="line">   <span class="regexp">//</span> index <span class="number">2</span></span><br><span class="line">   <span class="regexp">//</span> index <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(let value of [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].values())&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;value&#x27;</span>,value);</span><br><span class="line">   <span class="regexp">//</span> value <span class="number">1</span></span><br><span class="line">   <span class="regexp">//</span> value <span class="number">2</span></span><br><span class="line">   <span class="regexp">//</span> value <span class="number">3</span></span><br><span class="line">   <span class="regexp">//</span> value <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(let [index,value] of [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].entries())&#123;</span><br><span class="line">    console.log(index,value);</span><br><span class="line">   <span class="regexp">//</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">   <span class="regexp">//</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">   <span class="regexp">//</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line">   <span class="regexp">//</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line">   <span class="regexp">//</span> <span class="number">4</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-Array-copyWithin"><a href="#5-Array-copyWithin" class="headerlink" title="5.Array.copyWithin"></a>5.Array.copyWithin</h2><p>截取一定长度的数字并且替换在相对应的索引的位置</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log([<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>].copyWithin(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>))<span class="comment">;  //  [1, 6, 7, 6, 7, 2, 3]  // 截取3-5的位置的数字，从索引1的位置开始替换</span></span><br><span class="line">  console.log([<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>].copyWithin(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>))<span class="comment">;  //  [1, 6, 7, 2, 7, 2, 3] </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-findIndex和find"><a href="#6-findIndex和find" class="headerlink" title="6.findIndex和find"></a>6.findIndex和find</h2><p>数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="name">function</span>(<span class="name">item</span>)&#123;return item &gt; <span class="number">3</span>&#125;))<span class="comment">;   //4</span></span><br><span class="line">  console.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="name">function</span>(<span class="name">item</span>)&#123;return item &gt; <span class="number">3</span>&#125;))<span class="comment">;   // 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-includes"><a href="#7-includes" class="headerlink" title="7.includes"></a>7.includes</h2><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log([<span class="number">1</span>,<span class="number">2</span>,NaN].includes(<span class="number">1</span>))<span class="comment">;  // true</span></span><br><span class="line">  console.log([<span class="number">1</span>,<span class="number">2</span>,NaN].includes(<span class="name">NaN</span>))<span class="comment">;  // true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-扩展运算符"><a href="#8-扩展运算符" class="headerlink" title="8.扩展运算符"></a>8.扩展运算符</h2><p>扩展运算符（spread）是三个点（…）。将一个数组转为用逗号分隔的参数序列。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">console<span class="selector-class">.log</span>(...<span class="selector-attr">[1, 2, 3]</span>)</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line">console<span class="selector-class">.log</span>(<span class="number">1</span>, ...<span class="selector-attr">[2, 3, 4]</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[...document.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)]</span></span><br><span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></table></figure>
<h1 id="七-函数扩展"><a href="#七-函数扩展" class="headerlink" title="七 函数扩展"></a>七 函数扩展</h1><h2 id="1-默认值"><a href="#1-默认值" class="headerlink" title="1.默认值"></a>1.默认值</h2><p>ES6 之前，不能直接为函数的参数指定默认值;ES6允许为函数的参数设置默认值，即直接写在参数定义的后面。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">function</span> fn(x,y=<span class="string">&#x27;hello&#x27;</span>)&#123;  <span class="regexp">//</span> 默认值后面不能再出现形参</span><br><span class="line">		console.log(x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	fn(<span class="string">&#x27;word&#x27;</span>);  <span class="regexp">//</span> word hello</span><br><span class="line">	fn(<span class="string">&#x27;word&#x27;</span>,<span class="string">&#x27;nihao&#x27;</span>)  <span class="regexp">//</span> word nihao</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	let a = <span class="string">&#x27;nihao&#x27;</span>;</span><br><span class="line">	<span class="keyword">function</span> test(a,b=a)&#123;  <span class="regexp">//</span><span class="number">1</span>.</span><br><span class="line">		<span class="regexp">//</span>let a = <span class="number">1</span>; 参数变量是默认声明的，所以不能用let或const再次声明</span><br><span class="line">		console.log(a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	test(<span class="string">&#x27;word&#x27;</span>); <span class="regexp">//</span> word word  </span><br><span class="line">	test();  <span class="regexp">//u</span>ndefined undefined</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">	let a = <span class="string">&#x27;nihao&#x27;</span>;</span><br><span class="line">	<span class="keyword">function</span> test(x,b=a)&#123;  <span class="regexp">//</span><span class="number">2</span>.</span><br><span class="line">		console.log(x,b)</span><br><span class="line">	&#125;</span><br><span class="line">	test(<span class="string">&#x27;hello&#x27;</span>);<span class="regexp">//</span> hello nihao</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-rest参数"><a href="#3-rest参数" class="headerlink" title="3.rest参数"></a>3.rest参数</h2><p>ES6 引入rest参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(<span class="rest_arg">...arg</span>)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(let v of arg)&#123;</span><br><span class="line">			console.log(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">	<span class="comment">//1</span></span><br><span class="line">	<span class="comment">//2</span></span><br><span class="line">	<span class="comment">//3</span></span><br><span class="line">	<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">	console.log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);  <span class="comment">// 1，2，3，4</span></span><br><span class="line">	console.log(<span class="string">&#x27;a&#x27;</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]); <span class="comment">// a,1,2,3,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="4.箭头函数"></a>4.箭头函数</h2><p>ES6 允许使用“箭头”（=&gt;）定义函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> arr = <span class="function"><span class="params">v</span> =&gt;</span> v*<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(arr(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125; <span class="comment">//如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用注意点<br>箭头函数有几个使用注意点。</p>
<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>
<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>
<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>
<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>
<h2 id="5-绑定-this"><a href="#5-绑定-this" class="headerlink" title="5.绑定 this"></a>5.绑定 this</h2><p>函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">foo::bar;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">bar.bind(foo);</span><br><span class="line"></span><br><span class="line">foo::bar(...arguments);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">bar.apply(foo, arguments);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasOwnProperty = <span class="keyword">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasOwn</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj::hasOwnProperty(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">function</span> <span class="title">fn1</span>(x)&#123;</span><br><span class="line">		console.log(&#x27;fn1&#x27;,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">function</span> <span class="title">fn2</span>(x)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">fn1(x)</span>;  // 对fn1的调用必须在最后一步操作</span><br><span class="line">	&#125;</span><br><span class="line">	fn2(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="八-对象扩展"><a href="#八-对象扩展" class="headerlink" title="八 对象扩展"></a>八 对象扩展</h1><h2 id="1-属性的简介表示法"><a href="#1-属性的简介表示法" class="headerlink" title="1.属性的简介表示法"></a>1.属性的简介表示法</h2><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> a = <span class="number">5</span>,b=<span class="number">6</span>;</span><br><span class="line">	<span class="keyword">let</span> es5 = &#123;</span><br><span class="line">		<span class="attr">a</span>:a,</span><br><span class="line">		<span class="attr">b</span>:b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">let</span> es6 = &#123;</span><br><span class="line">		a,</span><br><span class="line">		b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(es5,es6)  <span class="comment">// &#123;a: 5, b: 6&#125;  &#123;a: 5, b: 6&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> es5_fn = &#123;   <span class="comment">// </span></span><br><span class="line">		<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">let</span> es6_fn = &#123;</span><br><span class="line">		<span class="function"><span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(es5_fn.fn,es6_fn.fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-动态key值"><a href="#2-动态key值" class="headerlink" title="2.动态key值"></a>2.动态key值</h2><p>es6允许属性的key值是动态的变量</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> a = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">	<span class="keyword">let</span> es5_obj = &#123;</span><br><span class="line">		a:<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">		b:<span class="string">&#x27;c&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">let</span> es6_obj = &#123;</span><br><span class="line">		[<span class="meta">a</span>]:<span class="string">&#x27;c&#x27;</span>   <span class="comment">// a是动态的变量，可以自由赋值</span></span><br><span class="line">	&#125;</span><br><span class="line">	console.log(es5_obj, es6_obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Object-is"><a href="#3-Object-is" class="headerlink" title="3.Object.is"></a>3.Object.is</h2><p>这个方法相当于es5 中的 ===，来判断属性是否相等</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;is&#x27;</span>,<span class="built_in">Object</span>.<span class="keyword">is</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>));  <span class="regexp">//</span> <span class="literal">true</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;is&#x27;</span>,<span class="built_in">Object</span>.<span class="keyword">is</span>([],[]));    <span class="regexp">//</span> <span class="literal">false</span>   数组对象拥有不同的地址，</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-Object-assign"><a href="#4-Object-assign" class="headerlink" title="4.Object.assign"></a>4.Object.assign</h2><p>Object.assign方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象。</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	console.log(<span class="name">&#x27;</span>拷贝&#x27;,Object.assign(&#123;a:1&#125;,&#123;b:2&#125;))<span class="comment">;  //浅拷贝</span></span><br><span class="line"></span><br><span class="line">	let test = &#123;a:2,b:3&#125;</span><br><span class="line">	for(<span class="name"><span class="builtin-name">let</span></span> [key,value] of Object.entries(<span class="name">test</span>))&#123;   // 遍历</span><br><span class="line">		console.log([key,value])<span class="comment">; </span></span><br><span class="line">		//[a:2]</span><br><span class="line">		//[b:3]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="九-Symbol"><a href="#九-Symbol" class="headerlink" title="九 Symbol"></a>九 Symbol</h1><h2 id="1-Symbol简单举例"><a href="#1-Symbol简单举例" class="headerlink" title="1.Symbol简单举例"></a>1.Symbol简单举例</h2><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>();</span><br><span class="line">	<span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>();</span><br><span class="line">	<span class="built_in">console</span>.log(a1===a2)   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;a3&#x27;</span>);</span><br><span class="line">	<span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;a3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(a3===a4);  <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Symbol的一些API"><a href="#2-Symbol的一些API" class="headerlink" title="2.Symbol的一些API"></a>2.Symbol的一些API</h2><p>Symbol.for可以用来命名具有相同的key值的对象。<br>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。<br>Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> a1 = <span class="module-access"><span class="module"><span class="identifier">Symbol</span>.</span></span><span class="keyword">for</span>(&#x27;abc&#x27;);</span><br><span class="line">	<span class="keyword">let</span> obj = &#123;</span><br><span class="line">		<span class="literal">[<span class="identifier">a1</span>]</span>:<span class="number">123</span>,</span><br><span class="line">		abc:<span class="number">234</span>,</span><br><span class="line">		c:<span class="number">345</span></span><br><span class="line">	&#125;</span><br><span class="line">	console.log(obj); </span><br><span class="line">	<span class="comment">// abc:234</span></span><br><span class="line">	<span class="comment">// c:345</span></span><br><span class="line">	<span class="comment">// Symbol(abc):123</span></span><br><span class="line"></span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertySymbols(<span class="params">obj</span>)</span>.<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">		console.log(&#x27;symbol&#x27;,item,obj<span class="literal">[<span class="identifier">item</span>]</span>); <span class="comment">//symbol Symbol(abc) 123</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">Reflect</span>.</span></span>own<span class="constructor">Keys(<span class="params">obj</span>)</span>.<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">		console.log(item,obj<span class="literal">[<span class="identifier">item</span>]</span>); </span><br><span class="line">		<span class="comment">//abc 234</span></span><br><span class="line">		<span class="comment">//c 345</span></span><br><span class="line">		<span class="comment">//Symbol(abc) 123</span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十-Map和Set数据结构"><a href="#十-Map和Set数据结构" class="headerlink" title="十 Map和Set数据结构"></a>十 Map和Set数据结构</h1><h2 id="1-set的基本用法"><a href="#1-set的基本用法" class="headerlink" title="1.set的基本用法"></a>1.set的基本用法</h2><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。Set 本身是一个构造函数，用来生成 Set 数据结构。 Set 结构不会添加重复的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">	list.add(<span class="number">2</span>);</span><br><span class="line">	list.add(<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(list.size);  <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">let</span> list2 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line">	<span class="built_in">console</span>.log(list2.size); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(list2) <span class="comment">//&#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>];   <span class="comment">//这里可以当作数组去重</span></span><br><span class="line">	<span class="keyword">let</span> list3 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr2);</span><br><span class="line">	<span class="built_in">console</span>.log(list3) <span class="comment">//&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>add(value)：添加某个值，返回Set结构本身。<br>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>clear()：清除所有成员，没有返回值。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	let arr = [<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;delete&#x27;</span>,<span class="string">&#x27;clear&#x27;</span>,<span class="string">&#x27;has&#x27;</span>];</span><br><span class="line">	let list = new Set(arr);</span><br><span class="line">	console.log(list); <span class="regexp">//</span> &#123;<span class="string">&quot;add&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;clear&quot;</span>, <span class="string">&quot;has&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list.<span class="keyword">delete</span>(<span class="string">&#x27;add&#x27;</span>);</span><br><span class="line">	console.log(list); <span class="regexp">//</span> &#123;<span class="string">&quot;delete&quot;</span>, <span class="string">&quot;clear&quot;</span>, <span class="string">&quot;has&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	console.log(list.has(<span class="string">&#x27;clear&#x27;</span>)); <span class="regexp">//</span> true</span><br><span class="line"></span><br><span class="line">	list.clear();  </span><br><span class="line">	console.log(list); <span class="regexp">//</span>&#123;&#125;</span><br><span class="line">	<span class="regexp">//</span>set遍历方法</span><br><span class="line">	&#123;</span><br><span class="line">		let arr = [<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;delete&#x27;</span>,<span class="string">&#x27;clear&#x27;</span>,<span class="string">&#x27;has&#x27;</span>];</span><br><span class="line">		let list = new Set(arr);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(let key of list.keys())&#123;</span><br><span class="line">			console.log(<span class="string">&#x27;keys&#x27;</span>,key)</span><br><span class="line">			<span class="regexp">//</span>keys add</span><br><span class="line">			<span class="regexp">//</span>keys <span class="keyword">delete</span></span><br><span class="line">			<span class="regexp">//</span>keys clear</span><br><span class="line">			<span class="regexp">//</span>keys has</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(let value of list.values())&#123;</span><br><span class="line">			console.log(<span class="string">&#x27;values&#x27;</span>,value)</span><br><span class="line">			<span class="regexp">//</span>values add</span><br><span class="line">			<span class="regexp">//</span>values <span class="keyword">delete</span></span><br><span class="line">			<span class="regexp">//</span>values clear</span><br><span class="line">			<span class="regexp">//</span>values has</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(let [key,value] of list.entries())&#123;</span><br><span class="line">			console.log(key,value);</span><br><span class="line">			<span class="regexp">//</span>add add</span><br><span class="line">			<span class="regexp">//</span><span class="keyword">delete</span> <span class="keyword">delete</span></span><br><span class="line">			<span class="regexp">//</span>clear clear</span><br><span class="line">			<span class="regexp">//</span>has has</span><br><span class="line">		&#125;</span><br><span class="line">		list.forEach(<span class="keyword">function</span>(item)&#123;console.log(item)&#125;)</span><br><span class="line">		   <span class="regexp">//</span> add</span><br><span class="line">		   <span class="regexp">//</span> <span class="keyword">delete</span></span><br><span class="line">		   <span class="regexp">//</span> clear</span><br><span class="line">		   <span class="regexp">//</span> has</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-WeakSet基本用法"><a href="#2-WeakSet基本用法" class="headerlink" title="2.WeakSet基本用法"></a>2.WeakSet基本用法</h2><p>WeakSet结构与Set类似，也是不重复的值的集合。但是，它与 Set有两个区别。首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>WeakSet中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。<br>WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。<br>WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。<br>WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">	ws.add(<span class="number">1</span>)</span><br><span class="line">	<span class="comment">// TypeError: Invalid value used in weak set</span></span><br><span class="line">	ws.add(<span class="built_in">Symbol</span>())</span><br><span class="line">	<span class="comment">// TypeError: invalid value used in weak set</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> weakset = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()  <span class="comment">// 没有clear，set方法，不能遍历</span></span><br><span class="line">	<span class="keyword">let</span> obj = &#123;&#125;   </span><br><span class="line">	weakset.add(obj)</span><br><span class="line">	<span class="comment">// weekset.add(2)  WeakSet必须添加的是对象，弱引用   </span></span><br><span class="line">	<span class="built_in">console</span>.log(weakset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Map的基本用法"><a href="#3-Map的基本用法" class="headerlink" title="3.Map的基本用法"></a>3.Map的基本用法</h2><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object结构提供了“字符串—值”的对应，Map结构提供了“值—值”的</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="built_in">map</span> = <span class="keyword">new</span> Map([</span><br><span class="line">	  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">	  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Author&#x27;</span>]</span><br><span class="line">	]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">size</span> <span class="comment">// 2</span></span><br><span class="line">	<span class="built_in">map</span>.has(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// &quot;张三&quot;</span></span><br><span class="line">	<span class="built_in">map</span>.has(<span class="string">&#x27;title&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">&#x27;title&#x27;</span>) <span class="comment">// &quot;Author&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">	let <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">	let arr = [<span class="string">&#x27;123&#x27;</span>];</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">set</span>(arr,<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line">	console.<span class="built_in">log</span>(<span class="built_in">map</span>,<span class="built_in">map</span>.<span class="built_in">get</span>(arr)) <span class="comment">// &#123;[&quot;123&quot;] =&gt; &quot;456&quot;&#125; &quot;456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	let <span class="built_in">map</span> = <span class="keyword">new</span> Map([[<span class="string">&#x27;a&#x27;</span>,<span class="number">123</span>],[<span class="string">&#x27;b&#x27;</span>,<span class="number">456</span>]])</span><br><span class="line">	console.<span class="built_in">log</span>(<span class="built_in">map</span>);  					<span class="comment">//&#123;&quot;a&quot; =&gt; 123, &quot;b&quot; =&gt; 456&#125;</span></span><br><span class="line">	console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="built_in">size</span>);  			<span class="comment">//2</span></span><br><span class="line">	console.<span class="built_in">log</span>(<span class="string">&#x27;123&#x27;</span>+<span class="built_in">map</span>.delete(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line">	console.<span class="built_in">log</span>(<span class="built_in">map</span>)  					<span class="comment">// &#123;&quot;b&quot; =&gt; 456&#125;</span></span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">clear</span>()</span><br><span class="line">	console.<span class="built_in">log</span>(<span class="built_in">map</span>);					<span class="comment">//&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-WeakMap的一些API"><a href="#4-WeakMap的一些API" class="headerlink" title="4.WeakMap的一些API"></a>4.WeakMap的一些API</h2><p>WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>WeakMap的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。<br><strong>WeakMap 与 Map 在 API 上的区别主要是两个，一是没有遍历操作（即没有key()、values()和entries()方法），也没有size属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，即不支持clear方法。因此，WeakMap只有四个方法可用：get()、set()、has()、delete()。</strong></p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	let weakmap = new WeakMap() //没有clear，set方法，不能遍历</span><br><span class="line">	let o = &#123;&#125;</span><br><span class="line">	weakmap.set(<span class="name">o</span>,<span class="number">123</span>)<span class="comment">;</span></span><br><span class="line">	console.log(<span class="name">weakmap.get</span>(<span class="name">o</span>))<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十一-proxy和reflect"><a href="#十一-proxy和reflect" class="headerlink" title="十一 proxy和reflect"></a>十一 proxy和reflect</h1><h2 id="1-Proxy"><a href="#1-Proxy" class="headerlink" title="1.Proxy"></a>1.Proxy</h2><p>Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let obj = &#123;</span><br><span class="line">    <span class="type">name</span>:<span class="string">&#x27;gaojingbo&#x27;</span>,</span><br><span class="line">    <span class="type">time</span>:<span class="string">&#x27;2017-08-13&#x27;</span>,</span><br><span class="line">    emp:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  let <span class="keyword">temp</span> = <span class="built_in">new</span> Proxy(obj,&#123;</span><br><span class="line">    <span class="keyword">get</span>(target,key)&#123;</span><br><span class="line">          <span class="keyword">return</span> target[key].replace(<span class="string">&#x27;2017&#x27;</span>,<span class="string">&#x27;2018&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(target,key,<span class="keyword">value</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">&#x27;name&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> target[key] = <span class="keyword">value</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    has(target,key)&#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">&#x27;name&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> target[key];</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteProperty(target,key)&#123;</span><br><span class="line">      <span class="keyword">if</span>(key.indexOf(<span class="string">&#x27;i&#x27;</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> target[key];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ownKeys(target)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">Object</span>.keys(target).<span class="keyword">filter</span>(item=&gt;item!=<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  console.log(<span class="string">&#x27;get&#x27;</span>,<span class="keyword">temp</span>.time);  //<span class="keyword">get</span> <span class="number">2018</span><span class="number">-08</span><span class="number">-13</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">temp</span>.time = <span class="string">&#x27;2018&#x27;</span>;</span><br><span class="line">  console.log(<span class="string">&#x27;set&#x27;</span>,<span class="keyword">temp</span>.name,<span class="keyword">temp</span>); //<span class="keyword">set</span> gaojingbo   &#123;<span class="type">name</span>: &quot;gaojingbo&quot;, <span class="type">time</span>: &quot;2017-08-13&quot;, <span class="keyword">temp</span>: &quot;123&quot;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">temp</span>.name = <span class="string">&#x27;hexiaofei&#x27;</span>;</span><br><span class="line">  console.log(<span class="string">&#x27;set&#x27;</span>,<span class="keyword">temp</span>.name,<span class="keyword">temp</span>); // <span class="keyword">set</span> hexiaofei  &#123;<span class="type">name</span>: &quot;hexiaofei&quot;, <span class="type">time</span>: &quot;2017-08-13&quot;, <span class="keyword">temp</span>: &quot;123&quot;&#125;</span><br><span class="line"></span><br><span class="line">  console.log(<span class="string">&#x27;has&#x27;</span>,<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> <span class="keyword">temp</span>,<span class="string">&#x27;time&#x27;</span> <span class="keyword">in</span> <span class="keyword">temp</span>);  //has <span class="keyword">true</span> <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> <span class="keyword">temp</span>.time;</span><br><span class="line">  console.log(<span class="string">&#x27;delete&#x27;</span>,<span class="keyword">temp</span>);   //<span class="keyword">delete</span>  &#123;<span class="type">name</span>: &quot;hexiaofei&quot;, <span class="keyword">temp</span>: &quot;123&quot;&#125;</span><br><span class="line"></span><br><span class="line">  console.log(<span class="string">&#x27;ownkeys&#x27;</span>,<span class="keyword">Object</span>.keys(<span class="keyword">temp</span>));  //[&quot;emp&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Reflect"><a href="#2-Reflect" class="headerlink" title="2.Reflect"></a>2.Reflect</h2><p>Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。<br>（1） 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。<br>（2） 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。<br>（3） 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。<br>（4）Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let obj = &#123;</span><br><span class="line">    <span class="type">name</span>:<span class="string">&#x27;gaojingbo&#x27;</span>,</span><br><span class="line">    <span class="type">time</span>:<span class="string">&#x27;2017-08-13&#x27;</span>,</span><br><span class="line">    emp:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(<span class="string">&#x27;reflect get&#x27;</span>,Reflect.<span class="keyword">get</span>(obj, <span class="string">&#x27;name&#x27;</span>));  // reflect <span class="keyword">get</span> gaojingbo</span><br><span class="line">  Reflect.<span class="keyword">set</span>(obj,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;hexaiofei&#x27;</span>);</span><br><span class="line">  console.log(obj);  // &#123;<span class="type">name</span>: &quot;hexaiofei&quot;, <span class="type">time</span>: &quot;2017-08-13&quot;, emp: &quot;123&quot;&#125;</span><br><span class="line">  console.log(<span class="string">&#x27;reflect has&#x27;</span>, Reflect.has(obj,<span class="string">&#x27;name&#x27;</span>));  //reflect has <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-简单应用"><a href="#3-简单应用" class="headerlink" title="3.简单应用"></a>3.简单应用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target,validator</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,&#123;</span><br><span class="line">      <span class="attr">_validator</span>:validator,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">target,key,value,proxy</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</span><br><span class="line">          <span class="keyword">let</span> va = <span class="built_in">this</span>._validator[key];</span><br><span class="line">          <span class="keyword">if</span>(!!va(value))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value,proxy);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`不能设置<span class="subst">$&#123;key&#125;</span>到<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>不存在`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> personValidators=&#123;</span><br><span class="line">    <span class="function"><span class="title">name</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">age</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> &amp;&amp; value &gt; <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">      <span class="keyword">return</span> validator(<span class="built_in">this</span>,personValidators)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;lilei&#x27;</span>,<span class="number">30</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(person);</span><br><span class="line"></span><br><span class="line">  person.name = <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二-Class的基本语法"><a href="#十二-Class的基本语法" class="headerlink" title="十二 Class的基本语法"></a>十二 Class的基本语法</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>ES6 提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name=<span class="string">&#x27;gaojingbo&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> v_parent = <span class="keyword">new</span> Parent();</span><br><span class="line">  <span class="built_in">console</span>.log(v_parent);  <span class="comment">//&#123;name: &quot;gaojingbo&quot;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h2><p>Class可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    constructor(name=<span class="symbol">&#x27;gaojingb</span>o&#x27;) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  let v_child = <span class="keyword">new</span> child();</span><br><span class="line">  console.log(v_child);  <span class="comment">//&#123;name: &quot;gaojingbo&quot;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-super关键字"><a href="#3-super关键字" class="headerlink" title="3.super关键字"></a>3.super关键字</h2><p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    constructor(name=<span class="symbol">&#x27;gaojingb</span>o&#x27;) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    constructor(name=<span class="symbol">&#x27;chil</span>d&#x27;)&#123;</span><br><span class="line">      <span class="keyword">super</span>(name);</span><br><span class="line">      <span class="keyword">this</span>.<span class="keyword">type</span> = <span class="symbol">&#x27;chil</span>d&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  let v_child = <span class="keyword">new</span> child();</span><br><span class="line">  console.log(v_child);  <span class="comment">//&#123;name: &quot;child&quot;, type: &quot;child&quot;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-getter和setter"><a href="#4-getter和setter" class="headerlink" title="4.getter和setter"></a>4.getter和setter</h2><p>与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name=<span class="string">&#x27;gaojingbo&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">get</span> <span class="title">longName</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;mk&#x27;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title">longName</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(value);</span></span><br><span class="line">      <span class="built_in">this</span>.name = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> v_parent = <span class="keyword">new</span> Parent();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>,v_parent.longName);  <span class="comment">//get mkgaojingbo</span></span><br><span class="line"></span><br><span class="line">  v_parent.longName = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>,v_parent.longName);  <span class="comment">//get mkhello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-静态方法"><a href="#5-静态方法" class="headerlink" title="5.静态方法"></a>5.静态方法</h2><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name=<span class="string">&#x27;gaojingbo&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">tell</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;tell&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> v_parent = <span class="keyword">new</span> Parent();</span><br><span class="line">  <span class="built_in">console</span>.log(v_parent);  <span class="comment">//&#123;name: &quot;gaojingbo&quot;&#125;</span></span><br><span class="line">  Parent.tell(); <span class="comment">// tell</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-静态属性"><a href="#6-静态属性" class="headerlink" title="6.静态属性"></a>6.静态属性</h2><p>静态属性指的是Class本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name=<span class="string">&#x27;gaojingbo&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  Parent.tell = <span class="string">&#x27;nihao&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> v_parent = <span class="keyword">new</span> Parent();</span><br><span class="line">  <span class="built_in">console</span>.log(v_parent);  <span class="comment">//&#123;name: &quot;gaojingbo&quot;&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(Parent.tell);   <span class="comment">// nihao</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十三-Promise"><a href="#十三-Promise" class="headerlink" title="十三 Promise"></a>十三 Promise</h1><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。<br>Promise对象有以下两个特点。<br>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Fulfilled（已成功）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Fulfiled和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 Resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<p>注意，为了行文方便，本章后面的Resolved统一只指Fulfilled状态，不包含Rejected状态。</p>
<p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p>
<p>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<p>如果某些事件不断地反复发生，一般来说，使用 Stream 模式是比部署Promise更好的选择。</p>
<h2 id="1-基本用法-1"><a href="#1-基本用法-1" class="headerlink" title="1.基本用法"></a>1.基本用法</h2><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p>
<p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 Pending 变为 Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 Pending 变为 Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
<p>Promise实例生成以后，可以用then方法分别指定Resolved状态和Rejected状态的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5的回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nihao&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      callback &amp;&amp; callback.call()</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ajax(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timeout1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// es6 Promise的用法</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wohao&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>,<span class="string">&#x27;timeout1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;   <span class="comment">// promise的用法</span></span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="2-Promise-prototype-then"><a href="#2-Promise-prototype-then" class="headerlink" title="2.Promise.prototype.then()"></a>2.Promise.prototype.then()</h2><p>Promise实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数。<br>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let ajax = function()&#123;</span><br><span class="line">    console.log(<span class="name">&#x27;dajiahao&#x27;</span>)<span class="comment">;</span></span><br><span class="line">    return new Promise((<span class="name"><span class="builtin-name">resolve</span></span>, reject) =&gt; &#123;</span><br><span class="line">      setTimeout(<span class="name">function</span>()&#123;</span><br><span class="line">        resolve()<span class="comment">;</span></span><br><span class="line">      &#125;,<span class="number">1000</span>)<span class="comment">;</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">  &#125;<span class="comment">;</span></span><br><span class="line">  ajax().then(<span class="name">function</span>()&#123;</span><br><span class="line">    return new Promise((<span class="name"><span class="builtin-name">resolve</span></span>, reject) =&gt; &#123;</span><br><span class="line">      setTimeout(<span class="name">function</span>()&#123;</span><br><span class="line">        resolve()<span class="comment">;</span></span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="name">function</span>()&#123;</span><br><span class="line">    console.log(<span class="name">&#x27;timeout3&#x27;</span>)<span class="comment">;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Promise-prototype-catch"><a href="#3-Promise-prototype-catch" class="headerlink" title="3.Promise.prototype.catch()"></a>3.Promise.prototype.catch()</h2><p>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;dajiahao&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(num&gt;<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  ajax(<span class="number">3</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)   <span class="comment">//出错了</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-Promise-all"><a href="#4-Promise-all" class="headerlink" title="4.Promise.all"></a>4.Promise.all</h2><p>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var</span> p = Promise.<span class="literal">all</span>([p<span class="number">1</span>, p<span class="number">2</span>, p<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>
<p>上面代码中，Promise.all方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。）</p>
<p>p的状态由p1、p2、p3决定，分成两种情况。</p>
<p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>
<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  function loadImg(<span class="name">src</span>)&#123;</span><br><span class="line">    return new Promise((<span class="name"><span class="builtin-name">resolve</span></span>, reject) =&gt; &#123;</span><br><span class="line">      let img = document.createElement(<span class="name">&#x27;img&#x27;</span>)<span class="comment">;</span></span><br><span class="line">      img.src=src;</span><br><span class="line">      img.onload = function()&#123;</span><br><span class="line">        resolve(<span class="name">img</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      img.onerror = function(<span class="name">error</span>)&#123;</span><br><span class="line">        reject(<span class="name">error</span>)<span class="comment">;  </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  function showImgs(<span class="name">imgs</span>)&#123;</span><br><span class="line">    imgs.forEach(<span class="name">function</span>(<span class="name">img</span>)&#123;</span><br><span class="line">      document.body.appendChild(<span class="name">img</span>)<span class="comment">;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  Promise.all([</span><br><span class="line">    loadImg(<span class="name">&#x27;&#x27;</span>),</span><br><span class="line">    loadImg(<span class="name">&#x27;&#x27;</span>),</span><br><span class="line">    loadImg(<span class="name">&#x27;&#x27;</span>),</span><br><span class="line">  ]).then(<span class="name">showImgs</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-Promise-race"><a href="#4-Promise-race" class="headerlink" title="4.Promise.race"></a>4.Promise.race</h2><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var</span> p = Promise.race([p<span class="number">1</span>, p<span class="number">2</span>, p<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>
<p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。<br>Promise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。<br>下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  function loadImg(<span class="name">src</span>)&#123;</span><br><span class="line">    return new Promise((<span class="name"><span class="builtin-name">resolve</span></span>, reject) =&gt; &#123;</span><br><span class="line">      let img = document.createElement(<span class="name">&#x27;img&#x27;</span>)<span class="comment">;</span></span><br><span class="line">      img.src=src;</span><br><span class="line">      img.onload = function()&#123;</span><br><span class="line">        resolve(<span class="name">img</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      img.onerror = function(<span class="name">error</span>)&#123;</span><br><span class="line">        reject(<span class="name">error</span>)<span class="comment">;  </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  function showImg(<span class="name">img</span>)&#123;</span><br><span class="line">    let img = document.createElement(<span class="name">&#x27;p&#x27;</span>)<span class="comment">;</span></span><br><span class="line">    p.appendChild(<span class="name">img</span>)<span class="comment">;</span></span><br><span class="line">    document.body.appendChild(<span class="name">p</span>)<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Promise.race([</span><br><span class="line">    loadImg(<span class="name">&#x27;&#x27;</span>),</span><br><span class="line">    loadImg(<span class="name">&#x27;&#x27;</span>),</span><br><span class="line">    loadImg(<span class="name">&#x27;&#x27;</span>),</span><br><span class="line">  ]).then(<span class="name">showImgs</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十四-Iterator-和-for…of-循环"><a href="#十四-Iterator-和-for…of-循环" class="headerlink" title="十四 Iterator 和 for…of 循环"></a>十四 Iterator 和 for…of 循环</h1><p>Iterator 接口的目的，就是为所有数据结构，提供了一种统一的访问机制，即for…of循环。当使用for…of循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。一种数据结构只要部署了 Iterator 接口，我们就称这种数据结构是”可遍历的“（iterable）。<br>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）。Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名Symbol.iterator，它是一个表达式，返回Symbol对象的iterator属性，这是一个预定义好的、类型为 Symbol的特殊值，所以要放在方括号内。</p>
<h2 id="1-数组的Symbol-iterator属性"><a href="#1-数组的Symbol-iterator属性" class="headerlink" title="1.数组的Symbol.iterator属性"></a>1.数组的Symbol.iterator属性</h2><p>变量arr是一个数组，原生就具有遍历器接口，部署在arr的Symbol.iterator属性上面。所以，调用这个属性，就得到遍历器对象。</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">&#x27;hellow&#x27;</span>,<span class="string">&#x27;world&#x27;</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">map</span> = arr[Symbol.iterator]();</span><br><span class="line">  console.log(<span class="keyword">map</span>.<span class="keyword">next</span>());  //&#123;value: <span class="string">&quot;hellow&quot;</span>, done:<span class="built_in"> false</span>&#125;</span><br><span class="line">  console.log(<span class="keyword">map</span>.<span class="keyword">next</span>());  //&#123;value: <span class="string">&quot;world&quot;</span>, done:<span class="built_in"> false</span>&#125;</span><br><span class="line">  console.log(<span class="keyword">map</span>.<span class="keyword">next</span>());  //&#123;value: <span class="string">&quot;undefined&quot;</span>, done:<span class="built_in"> false</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-自定义的Iterator接口"><a href="#2-自定义的Iterator接口" class="headerlink" title="2.自定义的Iterator接口"></a>2.自定义的Iterator接口</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let obj = &#123;</span><br><span class="line">    start:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],</span><br><span class="line">    end:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">    [Symbol.iterator]()&#123;</span><br><span class="line">      let self = this;</span><br><span class="line">      let index = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">      let arr = self.start.concat(<span class="name">self.end</span>)<span class="comment">;</span></span><br><span class="line">      let len = arr.length;</span><br><span class="line">      return &#123;</span><br><span class="line">        next()&#123;</span><br><span class="line">          if(<span class="name">index&lt;len</span>)&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              value:arr[index++],</span><br><span class="line">              done:false</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              value:arr[index++],</span><br><span class="line">              done:true</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  for(<span class="name"><span class="builtin-name">let</span></span> key of obj)&#123;</span><br><span class="line">    console.log(<span class="name"><span class="builtin-name">key</span></span>)<span class="comment">; //1 3 2 7 8 9</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十五-Genertor"><a href="#十五-Genertor" class="headerlink" title="十五 Genertor"></a>十五 Genertor</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><p>Generator 函数有多种理解角度。从语法上，首先可以把它理解成，Generator函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，也就是说，Generator函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历Generator函数内部的每一个状态。形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let tell = <span class="function"><span class="keyword">function</span>* <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  let k = tell();</span><br><span class="line">  console.<span class="built_in">log</span>(k.<span class="built_in">next</span>()); //&#123;value: <span class="string">&quot;a&quot;</span>, done: <span class="literal">false</span>&#125;</span><br><span class="line">  console.<span class="built_in">log</span>(k.<span class="built_in">next</span>()); //&#123;value: <span class="string">&quot;b&quot;</span>, done: <span class="literal">false</span>&#125;</span><br><span class="line">  console.<span class="built_in">log</span>(k.<span class="built_in">next</span>()); //&#123;value: <span class="string">&quot;c&quot;</span>, done: <span class="literal">true</span>&#125;</span><br><span class="line">  console.<span class="built_in">log</span>(k.<span class="built_in">next</span>()); //&#123;value: undefined, done: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-与-Iterator-接口的关系"><a href="#2-与-Iterator-接口的关系" class="headerlink" title="2.与 Iterator 接口的关系"></a>2.与 Iterator 接口的关系</h2><p>由于 Generator 函数就是遍历器生成函数，因此可以把Generator赋值给对象的Symbol.iterator属性，从而使得该对象具有 Iterator 接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// 1 2 3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-next方法"><a href="#3-next方法" class="headerlink" title="3.next方法"></a>3.next方法</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let state = <span class="function"><span class="keyword">function</span>* <span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="built_in">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">      <span class="built_in">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">      <span class="built_in">yield</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  let <span class="built_in">status</span> = state();</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">status</span>.<span class="built_in">next</span>());  //a</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">status</span>.<span class="built_in">next</span>());  //b</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">status</span>.<span class="built_in">next</span>());  //c</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">status</span>.<span class="built_in">next</span>());  //a</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">status</span>.<span class="built_in">next</span>());  //b</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">status</span>.<span class="built_in">next</span>());  //c</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">status</span>.<span class="built_in">next</span>());  //a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-Genertor的简单应用"><a href="#4-Genertor的简单应用" class="headerlink" title="4.Genertor的简单应用"></a>4.Genertor的简单应用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单的抽奖</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> draw = <span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> chou = <span class="function"><span class="keyword">function</span> *(<span class="params">count</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (count&gt;<span class="number">0</span>) &#123;</span><br><span class="line">      count--;</span><br><span class="line">      <span class="keyword">yield</span> draw(count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> start = chou(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">  btn.id = <span class="string">&#x27;start&#x27;</span>;</span><br><span class="line">  btn.textContent = <span class="string">&#x27;抽奖&#x27;</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;start&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    start.next();</span><br><span class="line">  &#125;,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 长轮询</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(&#123;<span class="attr">code</span>:<span class="number">1</span>&#125;)</span><br><span class="line">      &#125;,<span class="number">200</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> pull = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> generator = ajax();</span><br><span class="line">    <span class="keyword">let</span> step = generator.next();</span><br><span class="line">    step.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(d.code != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;wait&#x27;</span>);   <span class="comment">//隔一秒输出 wait</span></span><br><span class="line">          pull();</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(d);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  pull();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十六修饰器"><a href="#十六修饰器" class="headerlink" title="十六修饰器"></a>十六修饰器</h1><h2 id="1-方法的修饰"><a href="#1-方法的修饰" class="headerlink" title="1.方法的修饰"></a>1.方法的修饰</h2><p>修饰器函数一共可以接受三个参数，第一个参数是所要修饰的目标对象，即类的实例（这不同于类的修饰，那种情况时target参数指的是类本身）；第二个参数是所要修饰的属性名，第三个参数是该属性的描述对象。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let readonly = <span class="keyword">function</span>(target,name,descriptor)&#123;</span><br><span class="line">    descriptor.writable = false;</span><br><span class="line">    return descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">  class test&#123;</span><br><span class="line">    @readonly</span><br><span class="line">    time()&#123;</span><br><span class="line">      return <span class="string">&#x27;2017-08-27&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  let tests = new test();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  console.log(tests.time());  <span class="regexp">//</span> <span class="number">2017</span>-<span class="number">08</span>-<span class="number">27</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> let testss = new test();</span><br><span class="line">  <span class="regexp">//</span> <span class="regexp">//</span> tests.time = <span class="keyword">function</span>()&#123;</span><br><span class="line">  <span class="regexp">//</span> <span class="regexp">//</span>   console.log(<span class="string">&#x27;2017-08-28&#x27;</span>);</span><br><span class="line">  <span class="regexp">//</span> <span class="regexp">//</span> &#125;</span><br><span class="line">  <span class="regexp">//</span> console.log(tests.time());  <span class="regexp">//</span>Cannot assign to read only property <span class="string">&#x27;time&#x27;</span> of object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-类的修饰"><a href="#2-类的修饰" class="headerlink" title="2.类的修饰"></a>2.类的修饰</h2><p>修饰器是一个对类进行处理的函数。修饰器函数的第一个参数，就是所要修饰的目标类。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> typename = <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">    target.myname = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="meta">@typename</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(test.myname) <span class="comment">// hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十七模块化"><a href="#十七模块化" class="headerlink" title="十七模块化"></a>十七模块化</h1><p>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> A = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">text</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;345&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> A = <span class="number">123</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">text</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;345&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    A,</span><br><span class="line">    text,</span><br><span class="line">    hello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb启动与停止</title>
    <url>/mongodb%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%81%9C%E6%AD%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在使用mongodb的过程中经常遇到这样的报错，child process failed, exited with error number 48</p>
<p>1、删除data目录下的mongod.lock;<br>2、ps -ef | grep mongo<br>3、kill -9 端口号（找到mongodb.conf的进程，然后删除）<br>4、./bin/mongod -f ./conf/mongod.conf</p>
<p>mongodb自动启动</p>
<ol>
<li><p>编写配置文件，主要指定数据库文件，日志文件，以及一些启动参数<br>在mongodb下新建data文件夹，以及子文件夹db，logs， 在logs中新建mongodb.log日志文件，其中db文件夹用来存储数据库文件，logs用来存储日志文件<br>在mongodb-3.2.10/bin/目录下新建mongodb.conf配置文件，内容如下:<br>dbpath=/usr/context/mongodb/data/db/<br>logpath=/usr/context/mongodb/data/log/mongodb.log<br>logappend=true<br>port=27017<br>fork=true<br>nohttpinterface=true<br>auth=true<br>dbpath:数据库文件路径<br>logpath:日志文件路径<br>logappend:是否追加日志<br>port:端口<br>fork:是否以后台进程启动<br>auth:是否启动授权认证<br>nohttpinterface:是否支持HTTP形式访问</p>
</li>
<li><p>编写自定义服务<br>在/lib/systemd/system/目录下新建mongodb.service文件，内容如下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Description</span>=mongodb</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=<span class="regexp">/usr/</span>local<span class="regexp">/mongodb/</span>bin<span class="regexp">/mongod --config /u</span>sr<span class="regexp">/local/m</span>ongodb/mongodb.conf</span><br><span class="line">ExecReload=<span class="regexp">/bin/</span>kill -s HUP $MAINPID</span><br><span class="line">ExecStop=<span class="regexp">/usr/</span>local<span class="regexp">/mongodb/</span>bin<span class="regexp">/mongod --shutdown --config /u</span>sr<span class="regexp">/local/m</span>ongodb<span class="regexp">/bin/m</span>ongodb.conf</span><br><span class="line">PrivateTmp=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>Description=mongodb<br>After=network.target remote-fs.target nss-lookup.target  </p>
<p>[Service]<br>Type=forking<br>ExecStart=/usr/context/mongodb/mongodb-3.2.10/bin/mongod –config /usr/context/mongodb/mongodb-3.2.10/bin/mongodb.conf<br>ExecReload=/bin/kill -s HUP $MAINPID<br>ExecStop=/usr/context/mongodb/mongodb-3.2.10/bin/mongod –shutdown –config /usr/context/mongodb/mongodb-3.2.10/bin/mongodb.conf<br>PrivateTmp=true  </p>
<p>[Install]<br>WantedBy=multi-user.target<br>设置权限<br>chmod 754 mongodb.service<br>启动关闭服务，设置开机启动<br>#启动服务<br>systemctl start mongodb.service<br>#关闭服务<br>systemctl stop mongodb.service<br>#开机启动<br>systemctl enable mongodb.service</p>
</li>
</ol>
<p>*注意:conf和service文件中设置路径，注意需要设置为绝对路径。</p>
<p>链接：<a href="https://www.jianshu.com/p/61582f4beff2">https://www.jianshu.com/p/61582f4beff2</a></p>
]]></content>
  </entry>
</search>
